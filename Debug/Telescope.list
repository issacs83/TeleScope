
Telescope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e7c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08001f3c  08001f3c  00011f3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fc0  08001fc0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08001fc0  08001fc0  00011fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001fc8  08001fc8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fc8  08001fc8  00011fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fcc  08001fcc  00011fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08001fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000014  08001fe4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08001fe4  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b77a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c96  00000000  00000000  0002b7b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000043fb  00000000  00000000  0002e44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000730  00000000  00000000  00032848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011d0  00000000  00000000  00032f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000138ed  00000000  00000000  00034148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d75d  00000000  00000000  00047a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006d786  00000000  00000000  00055192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000c2918  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000011bc  00000000  00000000  000c2968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001f24 	.word	0x08001f24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08001f24 	.word	0x08001f24

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8d8 	bl	800062c <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8d3 	bl	800062c <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	469b      	mov	fp, r3
 800048e:	d433      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 8000490:	465a      	mov	r2, fp
 8000492:	4653      	mov	r3, sl
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83a      	bhi.n	800051a <__udivmoddi4+0xc2>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e078      	b.n	800059c <__udivmoddi4+0x144>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e075      	b.n	80005a2 <__udivmoddi4+0x14a>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e028      	b.n	8000522 <__udivmoddi4+0xca>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	2320      	movs	r3, #32
 80004fc:	1a9b      	subs	r3, r3, r2
 80004fe:	4652      	mov	r2, sl
 8000500:	40da      	lsrs	r2, r3
 8000502:	4641      	mov	r1, r8
 8000504:	0013      	movs	r3, r2
 8000506:	464a      	mov	r2, r9
 8000508:	408a      	lsls	r2, r1
 800050a:	0017      	movs	r7, r2
 800050c:	4642      	mov	r2, r8
 800050e:	431f      	orrs	r7, r3
 8000510:	4653      	mov	r3, sl
 8000512:	4093      	lsls	r3, r2
 8000514:	001e      	movs	r6, r3
 8000516:	42af      	cmp	r7, r5
 8000518:	d9c4      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051a:	2200      	movs	r2, #0
 800051c:	2300      	movs	r3, #0
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	4643      	mov	r3, r8
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0d9      	beq.n	80004dc <__udivmoddi4+0x84>
 8000528:	07fb      	lsls	r3, r7, #31
 800052a:	0872      	lsrs	r2, r6, #1
 800052c:	431a      	orrs	r2, r3
 800052e:	4646      	mov	r6, r8
 8000530:	087b      	lsrs	r3, r7, #1
 8000532:	e00e      	b.n	8000552 <__udivmoddi4+0xfa>
 8000534:	42ab      	cmp	r3, r5
 8000536:	d101      	bne.n	800053c <__udivmoddi4+0xe4>
 8000538:	42a2      	cmp	r2, r4
 800053a:	d80c      	bhi.n	8000556 <__udivmoddi4+0xfe>
 800053c:	1aa4      	subs	r4, r4, r2
 800053e:	419d      	sbcs	r5, r3
 8000540:	2001      	movs	r0, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2100      	movs	r1, #0
 8000548:	3e01      	subs	r6, #1
 800054a:	1824      	adds	r4, r4, r0
 800054c:	414d      	adcs	r5, r1
 800054e:	2e00      	cmp	r6, #0
 8000550:	d006      	beq.n	8000560 <__udivmoddi4+0x108>
 8000552:	42ab      	cmp	r3, r5
 8000554:	d9ee      	bls.n	8000534 <__udivmoddi4+0xdc>
 8000556:	3e01      	subs	r6, #1
 8000558:	1924      	adds	r4, r4, r4
 800055a:	416d      	adcs	r5, r5
 800055c:	2e00      	cmp	r6, #0
 800055e:	d1f8      	bne.n	8000552 <__udivmoddi4+0xfa>
 8000560:	9800      	ldr	r0, [sp, #0]
 8000562:	9901      	ldr	r1, [sp, #4]
 8000564:	465b      	mov	r3, fp
 8000566:	1900      	adds	r0, r0, r4
 8000568:	4169      	adcs	r1, r5
 800056a:	2b00      	cmp	r3, #0
 800056c:	db24      	blt.n	80005b8 <__udivmoddi4+0x160>
 800056e:	002b      	movs	r3, r5
 8000570:	465a      	mov	r2, fp
 8000572:	4644      	mov	r4, r8
 8000574:	40d3      	lsrs	r3, r2
 8000576:	002a      	movs	r2, r5
 8000578:	40e2      	lsrs	r2, r4
 800057a:	001c      	movs	r4, r3
 800057c:	465b      	mov	r3, fp
 800057e:	0015      	movs	r5, r2
 8000580:	2b00      	cmp	r3, #0
 8000582:	db2a      	blt.n	80005da <__udivmoddi4+0x182>
 8000584:	0026      	movs	r6, r4
 8000586:	409e      	lsls	r6, r3
 8000588:	0033      	movs	r3, r6
 800058a:	0026      	movs	r6, r4
 800058c:	4647      	mov	r7, r8
 800058e:	40be      	lsls	r6, r7
 8000590:	0032      	movs	r2, r6
 8000592:	1a80      	subs	r0, r0, r2
 8000594:	4199      	sbcs	r1, r3
 8000596:	9000      	str	r0, [sp, #0]
 8000598:	9101      	str	r1, [sp, #4]
 800059a:	e79f      	b.n	80004dc <__udivmoddi4+0x84>
 800059c:	42a3      	cmp	r3, r4
 800059e:	d8bc      	bhi.n	800051a <__udivmoddi4+0xc2>
 80005a0:	e783      	b.n	80004aa <__udivmoddi4+0x52>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	2200      	movs	r2, #0
 80005ac:	9100      	str	r1, [sp, #0]
 80005ae:	9201      	str	r2, [sp, #4]
 80005b0:	2201      	movs	r2, #1
 80005b2:	40da      	lsrs	r2, r3
 80005b4:	9201      	str	r2, [sp, #4]
 80005b6:	e786      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	2320      	movs	r3, #32
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	002a      	movs	r2, r5
 80005c0:	4646      	mov	r6, r8
 80005c2:	409a      	lsls	r2, r3
 80005c4:	0023      	movs	r3, r4
 80005c6:	40f3      	lsrs	r3, r6
 80005c8:	4644      	mov	r4, r8
 80005ca:	4313      	orrs	r3, r2
 80005cc:	002a      	movs	r2, r5
 80005ce:	40e2      	lsrs	r2, r4
 80005d0:	001c      	movs	r4, r3
 80005d2:	465b      	mov	r3, fp
 80005d4:	0015      	movs	r5, r2
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	dad4      	bge.n	8000584 <__udivmoddi4+0x12c>
 80005da:	4642      	mov	r2, r8
 80005dc:	002f      	movs	r7, r5
 80005de:	2320      	movs	r3, #32
 80005e0:	0026      	movs	r6, r4
 80005e2:	4097      	lsls	r7, r2
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	40de      	lsrs	r6, r3
 80005e8:	003b      	movs	r3, r7
 80005ea:	4333      	orrs	r3, r6
 80005ec:	e7cd      	b.n	800058a <__udivmoddi4+0x132>
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <__clzdi2>:
 800062c:	b510      	push	{r4, lr}
 800062e:	2900      	cmp	r1, #0
 8000630:	d103      	bne.n	800063a <__clzdi2+0xe>
 8000632:	f7ff ffdd 	bl	80005f0 <__clzsi2>
 8000636:	3020      	adds	r0, #32
 8000638:	e002      	b.n	8000640 <__clzdi2+0x14>
 800063a:	0008      	movs	r0, r1
 800063c:	f7ff ffd8 	bl	80005f0 <__clzsi2>
 8000640:	bd10      	pop	{r4, pc}
 8000642:	46c0      	nop			; (mov r8, r8)

08000644 <UnlockEEPROM>:

uint8_t UnlockEEPROM()
{
	uint32_t primask_bit;

	if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET) {
 8000644:	2201      	movs	r2, #1
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <UnlockEEPROM+0x2c>)
 8000648:	6859      	ldr	r1, [r3, #4]
 800064a:	4211      	tst	r1, r2
 800064c:	d101      	bne.n	8000652 <UnlockEEPROM+0xe>
		{
			return ERROR_FLASH_UNLOCK;
		}
	}

	return 0;
 800064e:	2000      	movs	r0, #0
}
 8000650:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000652:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000656:	b672      	cpsid	i
		FLASH->PEKEYR = 0x89ABCDEF;		// FLASH_PEKEY1;
 8000658:	4806      	ldr	r0, [pc, #24]	; (8000674 <UnlockEEPROM+0x30>)
 800065a:	60d8      	str	r0, [r3, #12]
		FLASH->PEKEYR = 0x02030405;		// FLASH_PEKEY2;
 800065c:	4806      	ldr	r0, [pc, #24]	; (8000678 <UnlockEEPROM+0x34>)
 800065e:	60d8      	str	r0, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000660:	f381 8810 	msr	PRIMASK, r1
		if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	4213      	tst	r3, r2
 8000668:	d0f1      	beq.n	800064e <UnlockEEPROM+0xa>
			return ERROR_FLASH_UNLOCK;
 800066a:	2020      	movs	r0, #32
 800066c:	e7f0      	b.n	8000650 <UnlockEEPROM+0xc>
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	40022000 	.word	0x40022000
 8000674:	89abcdef 	.word	0x89abcdef
 8000678:	02030405 	.word	0x02030405

0800067c <LockEEPROM>:

void LockEEPROM()
{
	SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800067c:	2301      	movs	r3, #1
 800067e:	4a02      	ldr	r2, [pc, #8]	; (8000688 <LockEEPROM+0xc>)
 8000680:	6851      	ldr	r1, [r2, #4]
 8000682:	430b      	orrs	r3, r1
 8000684:	6053      	str	r3, [r2, #4]
}
 8000686:	4770      	bx	lr
 8000688:	40022000 	.word	0x40022000

0800068c <ReadSystemConfig>:
{
	return(*(__IO uint8_t *)address);
}

void ReadSystemConfig()
{
 800068c:	2300      	movs	r3, #0
	uint8_t i;

//	LedLevel = ReadEEPROM(EEPROM_LEVEL);
//	LedMode = ReadEEPROM(EEPROM_MODE);
	for(i = 0; i < MAX_LEVEL; i++) {
		LedLight[i] = Read16EEPROM(EEPROM_LIGHT + i * 2);
 800068e:	4807      	ldr	r0, [pc, #28]	; (80006ac <ReadSystemConfig+0x20>)
		CDSLight[i] = Read16EEPROM(EEPROM_CDS + i * 2);
 8000690:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <ReadSystemConfig+0x24>)
	return(*(__IO uint16_t *)address);
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <ReadSystemConfig+0x28>)
 8000694:	1859      	adds	r1, r3, r1
 8000696:	8809      	ldrh	r1, [r1, #0]
		LedLight[i] = Read16EEPROM(EEPROM_LIGHT + i * 2);
 8000698:	52c1      	strh	r1, [r0, r3]
	return(*(__IO uint16_t *)address);
 800069a:	4907      	ldr	r1, [pc, #28]	; (80006b8 <ReadSystemConfig+0x2c>)
 800069c:	1859      	adds	r1, r3, r1
 800069e:	8809      	ldrh	r1, [r1, #0]
		CDSLight[i] = Read16EEPROM(EEPROM_CDS + i * 2);
 80006a0:	52d1      	strh	r1, [r2, r3]
	for(i = 0; i < MAX_LEVEL; i++) {
 80006a2:	3302      	adds	r3, #2
 80006a4:	2b18      	cmp	r3, #24
 80006a6:	d1f4      	bne.n	8000692 <ReadSystemConfig+0x6>
	}
}
 80006a8:	4770      	bx	lr
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	2000004a 	.word	0x2000004a
 80006b0:	20000030 	.word	0x20000030
 80006b4:	08080010 	.word	0x08080010
 80006b8:	08080030 	.word	0x08080030

080006bc <WriteSystemConfig>:

void WriteSystemConfig(uint8_t mode)
{
 80006bc:	b510      	push	{r4, lr}
 80006be:	0004      	movs	r4, r0
	uint8_t i;

	UnlockEEPROM();
 80006c0:	f7ff ffc0 	bl	8000644 <UnlockEEPROM>
//	if(mode == LED_LEVEL) ProgramEEPROM(EEPROM_PROGRAM_BYTE, EEPROM_LEVEL, (uint32_t)LedLevel);
//	else if(mode == LED_MODE) ProgramEEPROM(EEPROM_PROGRAM_BYTE, EEPROM_MODE, (uint32_t)LedMode);
//	else
		if(mode == LED_LIGHT) for(i = 0; i < MAX_LEVEL; i++) ProgramEEPROM(EEPROM_PROGRAM_WORD, EEPROM_LIGHT + i * 2, (uint32_t)LedLight[i]);
 80006c4:	2c02      	cmp	r4, #2
 80006c6:	d10c      	bne.n	80006e2 <WriteSystemConfig+0x26>
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <WriteSystemConfig+0x64>)
 80006ca:	4a16      	ldr	r2, [pc, #88]	; (8000724 <WriteSystemConfig+0x68>)
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <WriteSystemConfig+0x6c>)
 80006ce:	1852      	adds	r2, r2, r1
 80006d0:	4916      	ldr	r1, [pc, #88]	; (800072c <WriteSystemConfig+0x70>)
 80006d2:	5ad0      	ldrh	r0, [r2, r3]
		*(__IO uint16_t *)address = (uint16_t)data;
 80006d4:	8018      	strh	r0, [r3, #0]
		if(mode == LED_LIGHT) for(i = 0; i < MAX_LEVEL; i++) ProgramEEPROM(EEPROM_PROGRAM_WORD, EEPROM_LIGHT + i * 2, (uint32_t)LedLight[i]);
 80006d6:	3302      	adds	r3, #2
 80006d8:	428b      	cmp	r3, r1
 80006da:	d1fa      	bne.n	80006d2 <WriteSystemConfig+0x16>
		for(i = 0; i < MAX_LEVEL; i++) {
			ProgramEEPROM(EEPROM_PROGRAM_WORD, EEPROM_LIGHT + i * 2, (uint32_t)LedLight[i]);
			ProgramEEPROM(EEPROM_PROGRAM_WORD, EEPROM_CDS + i * 2, (uint32_t)CDSLight[i]);
		}
	}
	LockEEPROM();
 80006dc:	f7ff ffce 	bl	800067c <LockEEPROM>
}
 80006e0:	bd10      	pop	{r4, pc}
	else if(mode == CDS_LIGHT) for(i = 0; i < MAX_LEVEL; i++) ProgramEEPROM(EEPROM_PROGRAM_WORD, EEPROM_CDS + i * 2, (uint32_t)CDSLight[i]);
 80006e2:	2c03      	cmp	r4, #3
 80006e4:	d10a      	bne.n	80006fc <WriteSystemConfig+0x40>
 80006e6:	4912      	ldr	r1, [pc, #72]	; (8000730 <WriteSystemConfig+0x74>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	; (8000734 <WriteSystemConfig+0x78>)
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <WriteSystemConfig+0x7c>)
 80006ec:	1852      	adds	r2, r2, r1
 80006ee:	4913      	ldr	r1, [pc, #76]	; (800073c <WriteSystemConfig+0x80>)
 80006f0:	5ad0      	ldrh	r0, [r2, r3]
		*(__IO uint16_t *)address = (uint16_t)data;
 80006f2:	8018      	strh	r0, [r3, #0]
	else if(mode == CDS_LIGHT) for(i = 0; i < MAX_LEVEL; i++) ProgramEEPROM(EEPROM_PROGRAM_WORD, EEPROM_CDS + i * 2, (uint32_t)CDSLight[i]);
 80006f4:	3302      	adds	r3, #2
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d1fa      	bne.n	80006f0 <WriteSystemConfig+0x34>
 80006fa:	e7ef      	b.n	80006dc <WriteSystemConfig+0x20>
	else if(mode == LED_ALL) {
 80006fc:	2c04      	cmp	r4, #4
 80006fe:	d1ed      	bne.n	80006dc <WriteSystemConfig+0x20>
 8000700:	2300      	movs	r3, #0
			ProgramEEPROM(EEPROM_PROGRAM_WORD, EEPROM_LIGHT + i * 2, (uint32_t)LedLight[i]);
 8000702:	4c08      	ldr	r4, [pc, #32]	; (8000724 <WriteSystemConfig+0x68>)
			ProgramEEPROM(EEPROM_PROGRAM_WORD, EEPROM_CDS + i * 2, (uint32_t)CDSLight[i]);
 8000704:	480b      	ldr	r0, [pc, #44]	; (8000734 <WriteSystemConfig+0x78>)
			ProgramEEPROM(EEPROM_PROGRAM_WORD, EEPROM_LIGHT + i * 2, (uint32_t)LedLight[i]);
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <WriteSystemConfig+0x6c>)
 8000708:	5b19      	ldrh	r1, [r3, r4]
		*(__IO uint16_t *)address = (uint16_t)data;
 800070a:	189a      	adds	r2, r3, r2
 800070c:	8011      	strh	r1, [r2, #0]
			ProgramEEPROM(EEPROM_PROGRAM_WORD, EEPROM_CDS + i * 2, (uint32_t)CDSLight[i]);
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <WriteSystemConfig+0x7c>)
 8000710:	5a19      	ldrh	r1, [r3, r0]
		*(__IO uint16_t *)address = (uint16_t)data;
 8000712:	189a      	adds	r2, r3, r2
		for(i = 0; i < MAX_LEVEL; i++) {
 8000714:	3302      	adds	r3, #2
		*(__IO uint16_t *)address = (uint16_t)data;
 8000716:	8011      	strh	r1, [r2, #0]
		for(i = 0; i < MAX_LEVEL; i++) {
 8000718:	2b18      	cmp	r3, #24
 800071a:	d1f4      	bne.n	8000706 <WriteSystemConfig+0x4a>
 800071c:	e7de      	b.n	80006dc <WriteSystemConfig+0x20>
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	f7f7fff0 	.word	0xf7f7fff0
 8000724:	2000004a 	.word	0x2000004a
 8000728:	08080010 	.word	0x08080010
 800072c:	08080028 	.word	0x08080028
 8000730:	f7f7ffd0 	.word	0xf7f7ffd0
 8000734:	20000030 	.word	0x20000030
 8000738:	08080030 	.word	0x08080030
 800073c:	08080048 	.word	0x08080048

08000740 <GetADC>:
		/* For robust implementation, add here time-out management */
	}
}

uint16_t GetADC(int ch)
{
 8000740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000742:	b087      	sub	sp, #28
 8000744:	ac02      	add	r4, sp, #8
	uint16_t adc[8], temp;
	uint16_t sum = 0;
 8000746:	2300      	movs	r3, #0
{
 8000748:	0025      	movs	r5, r4
 800074a:	0026      	movs	r6, r4
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 800074c:	2704      	movs	r7, #4
	uint16_t sum = 0;
 800074e:	9301      	str	r3, [sp, #4]
  MODIFY_REG(ADCx->CR,
 8000750:	2001      	movs	r0, #1
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <GetADC+0xa4>)
 8000754:	4924      	ldr	r1, [pc, #144]	; (80007e8 <GetADC+0xa8>)
 8000756:	689a      	ldr	r2, [r3, #8]
 8000758:	400a      	ands	r2, r1
 800075a:	4302      	orrs	r2, r0
 800075c:	609a      	str	r2, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800075e:	689a      	ldr	r2, [r3, #8]
//	while(CurrentChannel != 0);
	for(i = 0; i < 8; i++) {

		LL_ADC_Enable(ADC1);

		if ((LL_ADC_IsEnabled(ADC1) == 1) && (LL_ADC_REG_IsConversionOngoing(ADC1) == 0))
 8000760:	4202      	tst	r2, r0
 8000762:	d00c      	beq.n	800077e <GetADC+0x3e>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8000764:	689a      	ldr	r2, [r3, #8]
 8000766:	423a      	tst	r2, r7
 8000768:	d109      	bne.n	800077e <GetADC+0x3e>
  MODIFY_REG(ADCx->CR,
 800076a:	689a      	ldr	r2, [r3, #8]
 800076c:	400a      	ands	r2, r1
 800076e:	433a      	orrs	r2, r7
 8000770:	609a      	str	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8000772:	681a      	ldr	r2, [r3, #0]
		{
			// Begin a conversion
			LL_ADC_REG_StartConversion(ADC1);

			// Wait until a conversion is done
			while (LL_ADC_IsActiveFlag_EOC(ADC1) == 0);
 8000774:	423a      	tst	r2, r7
 8000776:	d0fc      	beq.n	8000772 <GetADC+0x32>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8000778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800077a:	802a      	strh	r2, [r5, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800077c:	601f      	str	r7, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800077e:	689a      	ldr	r2, [r3, #8]

		//		LL_ADC_REG_SetSequencerChRem(ADC1, LL_ADC_CHANNEL_TEMPSENSOR);
		LL_ADC_Disable(ADC1);

//		adc[i] = ADC_array[ch];
		sum += adc[i];
 8000780:	8828      	ldrh	r0, [r5, #0]
 8000782:	400a      	ands	r2, r1
 8000784:	2102      	movs	r1, #2
 8000786:	4311      	orrs	r1, r2
 8000788:	6099      	str	r1, [r3, #8]
 800078a:	9b01      	ldr	r3, [sp, #4]
	for(i = 0; i < 8; i++) {
 800078c:	3502      	adds	r5, #2
		sum += adc[i];
 800078e:	1818      	adds	r0, r3, r0
 8000790:	b283      	uxth	r3, r0
		HAL_Delay(1);
 8000792:	2001      	movs	r0, #1
		sum += adc[i];
 8000794:	9301      	str	r3, [sp, #4]
		HAL_Delay(1);
 8000796:	f000 ff87 	bl	80016a8 <HAL_Delay>
	for(i = 0; i < 8; i++) {
 800079a:	ab06      	add	r3, sp, #24
 800079c:	42ab      	cmp	r3, r5
 800079e:	d1d7      	bne.n	8000750 <GetADC+0x10>
	}

	// sort
	for(i = 0; i < 8; i++) {
 80007a0:	2300      	movs	r3, #0
		for(j = i + 1; j < 8; j++) {
 80007a2:	3301      	adds	r3, #1
 80007a4:	0020      	movs	r0, r4
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	3402      	adds	r4, #2
 80007aa:	0021      	movs	r1, r4
 80007ac:	001a      	movs	r2, r3
 80007ae:	2a08      	cmp	r2, #8
 80007b0:	d10e      	bne.n	80007d0 <GetADC+0x90>
	for(i = 0; i < 8; i++) {
 80007b2:	2b08      	cmp	r3, #8
 80007b4:	d1f5      	bne.n	80007a2 <GetADC+0x62>
				adc[j] = temp;
			}
		}
	}

	sum -= adc[0] + adc[1] + adc[6] + adc[7];
 80007b6:	8873      	ldrh	r3, [r6, #2]
 80007b8:	8830      	ldrh	r0, [r6, #0]
 80007ba:	18c0      	adds	r0, r0, r3
 80007bc:	89b3      	ldrh	r3, [r6, #12]
 80007be:	18c0      	adds	r0, r0, r3
 80007c0:	89f3      	ldrh	r3, [r6, #14]
 80007c2:	18c0      	adds	r0, r0, r3
 80007c4:	9b01      	ldr	r3, [sp, #4]
 80007c6:	1a18      	subs	r0, r3, r0
 80007c8:	b280      	uxth	r0, r0
	sum /= 4;

	return(sum);
 80007ca:	0880      	lsrs	r0, r0, #2
}
 80007cc:	b007      	add	sp, #28
 80007ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(adc[i] < adc[j]) {
 80007d0:	8805      	ldrh	r5, [r0, #0]
 80007d2:	880f      	ldrh	r7, [r1, #0]
 80007d4:	42bd      	cmp	r5, r7
 80007d6:	d201      	bcs.n	80007dc <GetADC+0x9c>
				adc[i] = adc[j];
 80007d8:	8007      	strh	r7, [r0, #0]
				adc[j] = temp;
 80007da:	800d      	strh	r5, [r1, #0]
		for(j = i + 1; j < 8; j++) {
 80007dc:	3201      	adds	r2, #1
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	3102      	adds	r1, #2
 80007e2:	e7e4      	b.n	80007ae <GetADC+0x6e>
 80007e4:	40012400 	.word	0x40012400
 80007e8:	7fffffe8 	.word	0x7fffffe8

080007ec <ParsingData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int ParsingData(char *buffer, char sep, int pos, char *result)
{
 80007ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i, c;
	int n = 0;
 80007ee:	2400      	movs	r4, #0
{
 80007f0:	001e      	movs	r6, r3
	char found = 0;

	c = 0;
 80007f2:	0025      	movs	r5, r4
	for(i = 0; i < strlen(buffer); i++) {
 80007f4:	0027      	movs	r7, r4
{
 80007f6:	b085      	sub	sp, #20
 80007f8:	9001      	str	r0, [sp, #4]
 80007fa:	9103      	str	r1, [sp, #12]
 80007fc:	9202      	str	r2, [sp, #8]
	for(i = 0; i < strlen(buffer); i++) {
 80007fe:	9801      	ldr	r0, [sp, #4]
 8000800:	f7ff fc8c 	bl	800011c <strlen>
 8000804:	42b8      	cmp	r0, r7
 8000806:	d80e      	bhi.n	8000826 <ParsingData+0x3a>
 8000808:	002a      	movs	r2, r5
	char found = 0;
 800080a:	2300      	movs	r3, #0
			}
			n = 0;
		}
		else ByteBuffer[n++] = buffer[i];
	}
	if(pos == c) found = 1;
 800080c:	2000      	movs	r0, #0
 800080e:	4912      	ldr	r1, [pc, #72]	; (8000858 <ParsingData+0x6c>)
 8000810:	9d02      	ldr	r5, [sp, #8]
	ByteBuffer[n] = 0;
 8000812:	5508      	strb	r0, [r1, r4]
	if(pos == c) found = 1;
 8000814:	42aa      	cmp	r2, r5
 8000816:	d11a      	bne.n	800084e <ParsingData+0x62>

	if(found) memcpy(result, ByteBuffer, n + 1);
 8000818:	0030      	movs	r0, r6
 800081a:	1c62      	adds	r2, r4, #1
 800081c:	f001 fb70 	bl	8001f00 <memcpy>
	else {
		result[0] = 0;
		n = 0;
	}
	return(n);
}
 8000820:	0020      	movs	r0, r4
 8000822:	b005      	add	sp, #20
 8000824:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(buffer[i] == sep) {
 8000826:	9b01      	ldr	r3, [sp, #4]
 8000828:	9a03      	ldr	r2, [sp, #12]
 800082a:	5ddb      	ldrb	r3, [r3, r7]
 800082c:	4293      	cmp	r3, r2
 800082e:	d107      	bne.n	8000840 <ParsingData+0x54>
			if(pos == c++) {
 8000830:	9b02      	ldr	r3, [sp, #8]
 8000832:	1c6a      	adds	r2, r5, #1
 8000834:	429d      	cmp	r5, r3
 8000836:	d008      	beq.n	800084a <ParsingData+0x5e>
			n = 0;
 8000838:	2400      	movs	r4, #0
	for(i = 0; i < strlen(buffer); i++) {
 800083a:	0015      	movs	r5, r2
 800083c:	3701      	adds	r7, #1
 800083e:	e7de      	b.n	80007fe <ParsingData+0x12>
		else ByteBuffer[n++] = buffer[i];
 8000840:	4a05      	ldr	r2, [pc, #20]	; (8000858 <ParsingData+0x6c>)
 8000842:	5513      	strb	r3, [r2, r4]
 8000844:	002a      	movs	r2, r5
 8000846:	3401      	adds	r4, #1
 8000848:	e7f7      	b.n	800083a <ParsingData+0x4e>
				found = 1;
 800084a:	2301      	movs	r3, #1
 800084c:	e7de      	b.n	800080c <ParsingData+0x20>
	if(found) memcpy(result, ByteBuffer, n + 1);
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1e2      	bne.n	8000818 <ParsingData+0x2c>
		n = 0;
 8000852:	001c      	movs	r4, r3
		result[0] = 0;
 8000854:	7033      	strb	r3, [r6, #0]
	return(n);
 8000856:	e7e3      	b.n	8000820 <ParsingData+0x34>
 8000858:	20000062 	.word	0x20000062

0800085c <StringToInt>:

int StringToInt(char *buffer)
{
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	0004      	movs	r4, r0
	int ret = 0;
	int i, len, rt;

	for(i = 0; i < strlen(buffer); i++) {
 8000860:	f7ff fc5c 	bl	800011c <strlen>
 8000864:	2300      	movs	r3, #0
 8000866:	4283      	cmp	r3, r0
 8000868:	d003      	beq.n	8000872 <StringToInt+0x16>
		if(buffer[i] < '0' || buffer[i] > '9') break;
 800086a:	5ce2      	ldrb	r2, [r4, r3]
 800086c:	3a30      	subs	r2, #48	; 0x30
 800086e:	2a09      	cmp	r2, #9
 8000870:	d907      	bls.n	8000882 <StringToInt+0x26>
	for(i = 0; i < strlen(buffer); i++) {
 8000872:	2201      	movs	r2, #1
 8000874:	2000      	movs	r0, #0
	len = i;

	rt = 1;
	for(i = 0; i < len; i++) {
		ret += rt * (buffer[(len - 1) - i] - '0');
		rt *= 10;
 8000876:	250a      	movs	r5, #10
 8000878:	18e3      	adds	r3, r4, r3
	for(i = 0; i < len; i++) {
 800087a:	1e59      	subs	r1, r3, #1
 800087c:	429c      	cmp	r4, r3
 800087e:	d102      	bne.n	8000886 <StringToInt+0x2a>
	}
	return(ret);
}
 8000880:	bd70      	pop	{r4, r5, r6, pc}
	for(i = 0; i < strlen(buffer); i++) {
 8000882:	3301      	adds	r3, #1
 8000884:	e7ef      	b.n	8000866 <StringToInt+0xa>
		ret += rt * (buffer[(len - 1) - i] - '0');
 8000886:	780b      	ldrb	r3, [r1, #0]
 8000888:	3b30      	subs	r3, #48	; 0x30
 800088a:	4353      	muls	r3, r2
		rt *= 10;
 800088c:	436a      	muls	r2, r5
		ret += rt * (buffer[(len - 1) - i] - '0');
 800088e:	18c0      	adds	r0, r0, r3
		rt *= 10;
 8000890:	000b      	movs	r3, r1
 8000892:	e7f2      	b.n	800087a <StringToInt+0x1e>

08000894 <IntToString>:

char *IntToString(int data)
{
 8000894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000896:	0004      	movs	r4, r0
	int i, len, rt;

	memset(ByteBuffer, 0, sizeof(ByteBuffer));
 8000898:	4e10      	ldr	r6, [pc, #64]	; (80008dc <IntToString+0x48>)
 800089a:	2210      	movs	r2, #16
 800089c:	2100      	movs	r1, #0
 800089e:	0030      	movs	r0, r6
 80008a0:	f001 fb37 	bl	8001f12 <memset>
	len = 0;
 80008a4:	2300      	movs	r3, #0
	rt = data;
 80008a6:	0020      	movs	r0, r4
	len = 0;
 80008a8:	9301      	str	r3, [sp, #4]
	while(1) {
		len++;
 80008aa:	9d01      	ldr	r5, [sp, #4]
		rt /= 10;
 80008ac:	210a      	movs	r1, #10
		len++;
 80008ae:	1c6b      	adds	r3, r5, #1
 80008b0:	0007      	movs	r7, r0
 80008b2:	9301      	str	r3, [sp, #4]
		rt /= 10;
 80008b4:	f7ff fcc4 	bl	8000240 <__divsi3>
		if(rt <= 0) break;
 80008b8:	2f09      	cmp	r7, #9
 80008ba:	dcf6      	bgt.n	80008aa <IntToString+0x16>
	}

	rt = data;
	for(i = len - 1; i >= 0; i--) {
		rt = data % 10;
 80008bc:	270a      	movs	r7, #10
 80008be:	0020      	movs	r0, r4
 80008c0:	0039      	movs	r1, r7
 80008c2:	f7ff fda3 	bl	800040c <__aeabi_idivmod>
		ByteBuffer[i] = rt + '0';
 80008c6:	3130      	adds	r1, #48	; 0x30
		data /= 10;
 80008c8:	0020      	movs	r0, r4
		ByteBuffer[i] = rt + '0';
 80008ca:	5571      	strb	r1, [r6, r5]
		data /= 10;
 80008cc:	0039      	movs	r1, r7
 80008ce:	f7ff fcb7 	bl	8000240 <__divsi3>
 80008d2:	0004      	movs	r4, r0
	for(i = len - 1; i >= 0; i--) {
 80008d4:	3d01      	subs	r5, #1
 80008d6:	d2f2      	bcs.n	80008be <IntToString+0x2a>
	}

	return(ByteBuffer);
}
 80008d8:	0030      	movs	r0, r6
 80008da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80008dc:	20000062 	.word	0x20000062

080008e0 <Protocol>:

void Protocol(char *cmd)
{
 80008e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t i;

	ParsingData(cmd, ',', 0, CommandBuffer);
 80008e2:	4c4b      	ldr	r4, [pc, #300]	; (8000a10 <Protocol+0x130>)
 80008e4:	212c      	movs	r1, #44	; 0x2c
 80008e6:	0023      	movs	r3, r4
 80008e8:	2200      	movs	r2, #0
{
 80008ea:	0005      	movs	r5, r0
	ParsingData(cmd, ',', 0, CommandBuffer);
 80008ec:	f7ff ff7e 	bl	80007ec <ParsingData>
//		PrintUART(ModelName);
////		HAL_Delay(10);
//		PrintUART("\r\n");
//	}
//	else
		if(strcmp(CommandBuffer, ":READLEVEL") == 0) {
 80008f0:	0020      	movs	r0, r4
 80008f2:	4948      	ldr	r1, [pc, #288]	; (8000a14 <Protocol+0x134>)
 80008f4:	f7ff fc08 	bl	8000108 <strcmp>
 80008f8:	2800      	cmp	r0, #0
 80008fa:	d118      	bne.n	800092e <Protocol+0x4e>
		PrintUART(":LEVEL");
 80008fc:	4846      	ldr	r0, [pc, #280]	; (8000a18 <Protocol+0x138>)
 80008fe:	f000 fd85 	bl	800140c <PrintUART>
		for(i = 0; i < MAX_LEVEL; i++) {
 8000902:	4c46      	ldr	r4, [pc, #280]	; (8000a1c <Protocol+0x13c>)
 8000904:	0025      	movs	r5, r4
 8000906:	3518      	adds	r5, #24
			IntToString(LedLight[i]);
 8000908:	8820      	ldrh	r0, [r4, #0]
 800090a:	f7ff ffc3 	bl	8000894 <IntToString>
			PrintUART(",");
 800090e:	4844      	ldr	r0, [pc, #272]	; (8000a20 <Protocol+0x140>)
 8000910:	f000 fd7c 	bl	800140c <PrintUART>
			PrintUART(ByteBuffer);
 8000914:	4843      	ldr	r0, [pc, #268]	; (8000a24 <Protocol+0x144>)
 8000916:	f000 fd79 	bl	800140c <PrintUART>
		for(i = 0; i < MAX_LEVEL; i++) {
 800091a:	3402      	adds	r4, #2
			HAL_Delay(10);
 800091c:	200a      	movs	r0, #10
 800091e:	f000 fec3 	bl	80016a8 <HAL_Delay>
		for(i = 0; i < MAX_LEVEL; i++) {
 8000922:	42ac      	cmp	r4, r5
 8000924:	d1f0      	bne.n	8000908 <Protocol+0x28>
		}

		PrintUART("\r\n");
 8000926:	4840      	ldr	r0, [pc, #256]	; (8000a28 <Protocol+0x148>)
 8000928:	f000 fd70 	bl	800140c <PrintUART>
	}
	else if(strcmp(CommandBuffer, ":LUXOFF") == 0) {
//		SetLuxMode = 0;
		LuxOut = 0;
	}
}
 800092c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(strcmp(CommandBuffer, ":READLUX") == 0) {
 800092e:	0020      	movs	r0, r4
 8000930:	493e      	ldr	r1, [pc, #248]	; (8000a2c <Protocol+0x14c>)
 8000932:	f7ff fbe9 	bl	8000108 <strcmp>
 8000936:	2800      	cmp	r0, #0
 8000938:	d115      	bne.n	8000966 <Protocol+0x86>
		PrintUART(":LUX");
 800093a:	483d      	ldr	r0, [pc, #244]	; (8000a30 <Protocol+0x150>)
 800093c:	f000 fd66 	bl	800140c <PrintUART>
		for(i = 0; i < MAX_LEVEL; i++) {
 8000940:	4c3c      	ldr	r4, [pc, #240]	; (8000a34 <Protocol+0x154>)
 8000942:	0025      	movs	r5, r4
 8000944:	3518      	adds	r5, #24
			IntToString(CDSLight[i]);
 8000946:	8820      	ldrh	r0, [r4, #0]
 8000948:	f7ff ffa4 	bl	8000894 <IntToString>
			PrintUART(",");
 800094c:	4834      	ldr	r0, [pc, #208]	; (8000a20 <Protocol+0x140>)
 800094e:	f000 fd5d 	bl	800140c <PrintUART>
			PrintUART(ByteBuffer);
 8000952:	4834      	ldr	r0, [pc, #208]	; (8000a24 <Protocol+0x144>)
 8000954:	f000 fd5a 	bl	800140c <PrintUART>
		for(i = 0; i < MAX_LEVEL; i++) {
 8000958:	3402      	adds	r4, #2
			HAL_Delay(10);
 800095a:	200a      	movs	r0, #10
 800095c:	f000 fea4 	bl	80016a8 <HAL_Delay>
		for(i = 0; i < MAX_LEVEL; i++) {
 8000960:	42a5      	cmp	r5, r4
 8000962:	d1f0      	bne.n	8000946 <Protocol+0x66>
 8000964:	e7df      	b.n	8000926 <Protocol+0x46>
	else if(strcmp(CommandBuffer, ":WRITELEVEL") == 0) {
 8000966:	0020      	movs	r0, r4
 8000968:	4933      	ldr	r1, [pc, #204]	; (8000a38 <Protocol+0x158>)
 800096a:	f7ff fbcd 	bl	8000108 <strcmp>
 800096e:	2800      	cmp	r0, #0
 8000970:	d11c      	bne.n	80009ac <Protocol+0xcc>
 8000972:	2601      	movs	r6, #1
 8000974:	4f29      	ldr	r7, [pc, #164]	; (8000a1c <Protocol+0x13c>)
			ParsingData(cmd, ',', i + 1, CommandBuffer);
 8000976:	0032      	movs	r2, r6
 8000978:	0023      	movs	r3, r4
 800097a:	212c      	movs	r1, #44	; 0x2c
 800097c:	0028      	movs	r0, r5
 800097e:	f7ff ff35 	bl	80007ec <ParsingData>
			LedLight[i] = StringToInt(CommandBuffer);
 8000982:	0020      	movs	r0, r4
 8000984:	f7ff ff6a 	bl	800085c <StringToInt>
		for(i = 0; i < MAX_LEVEL; i++) {
 8000988:	3601      	adds	r6, #1
			LedLight[i] = StringToInt(CommandBuffer);
 800098a:	8038      	strh	r0, [r7, #0]
		for(i = 0; i < MAX_LEVEL; i++) {
 800098c:	3702      	adds	r7, #2
 800098e:	2e0d      	cmp	r6, #13
 8000990:	d1f1      	bne.n	8000976 <Protocol+0x96>
		WriteSystemConfig(LED_LIGHT);
 8000992:	2002      	movs	r0, #2
 8000994:	f7ff fe92 	bl	80006bc <WriteSystemConfig>
		HAL_Delay(100);
 8000998:	2064      	movs	r0, #100	; 0x64
 800099a:	f000 fe85 	bl	80016a8 <HAL_Delay>
		PrintUART(":ACK,LEVEL\r\n");
 800099e:	4827      	ldr	r0, [pc, #156]	; (8000a3c <Protocol+0x15c>)
		PrintUART(":ACK,LUX\r\n");
 80009a0:	f000 fd34 	bl	800140c <PrintUART>
		HAL_Delay(100);
 80009a4:	2064      	movs	r0, #100	; 0x64
 80009a6:	f000 fe7f 	bl	80016a8 <HAL_Delay>
 80009aa:	e7bf      	b.n	800092c <Protocol+0x4c>
	else if(strcmp(CommandBuffer, ":WRITELUX") == 0) {
 80009ac:	0020      	movs	r0, r4
 80009ae:	4924      	ldr	r1, [pc, #144]	; (8000a40 <Protocol+0x160>)
 80009b0:	f7ff fbaa 	bl	8000108 <strcmp>
 80009b4:	2800      	cmp	r0, #0
 80009b6:	d117      	bne.n	80009e8 <Protocol+0x108>
 80009b8:	2601      	movs	r6, #1
 80009ba:	4f1e      	ldr	r7, [pc, #120]	; (8000a34 <Protocol+0x154>)
			ParsingData(cmd, ',', i + 1, CommandBuffer);
 80009bc:	0032      	movs	r2, r6
 80009be:	0023      	movs	r3, r4
 80009c0:	212c      	movs	r1, #44	; 0x2c
 80009c2:	0028      	movs	r0, r5
 80009c4:	f7ff ff12 	bl	80007ec <ParsingData>
			CDSLight[i] = StringToInt(CommandBuffer);
 80009c8:	0020      	movs	r0, r4
 80009ca:	f7ff ff47 	bl	800085c <StringToInt>
		for(i = 0; i < MAX_LEVEL; i++) {
 80009ce:	3601      	adds	r6, #1
			CDSLight[i] = StringToInt(CommandBuffer);
 80009d0:	8038      	strh	r0, [r7, #0]
		for(i = 0; i < MAX_LEVEL; i++) {
 80009d2:	3702      	adds	r7, #2
 80009d4:	2e0d      	cmp	r6, #13
 80009d6:	d1f1      	bne.n	80009bc <Protocol+0xdc>
		WriteSystemConfig(CDS_LIGHT);
 80009d8:	2003      	movs	r0, #3
 80009da:	f7ff fe6f 	bl	80006bc <WriteSystemConfig>
		HAL_Delay(100);
 80009de:	2064      	movs	r0, #100	; 0x64
 80009e0:	f000 fe62 	bl	80016a8 <HAL_Delay>
		PrintUART(":ACK,LUX\r\n");
 80009e4:	4817      	ldr	r0, [pc, #92]	; (8000a44 <Protocol+0x164>)
 80009e6:	e7db      	b.n	80009a0 <Protocol+0xc0>
	else if(strcmp(CommandBuffer, ":LUXON") == 0) {
 80009e8:	0020      	movs	r0, r4
 80009ea:	4917      	ldr	r1, [pc, #92]	; (8000a48 <Protocol+0x168>)
 80009ec:	f7ff fb8c 	bl	8000108 <strcmp>
 80009f0:	2800      	cmp	r0, #0
 80009f2:	d103      	bne.n	80009fc <Protocol+0x11c>
		LuxOut = 1;
 80009f4:	2201      	movs	r2, #1
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <Protocol+0x16c>)
 80009f8:	701a      	strb	r2, [r3, #0]
 80009fa:	e797      	b.n	800092c <Protocol+0x4c>
	else if(strcmp(CommandBuffer, ":LUXOFF") == 0) {
 80009fc:	0020      	movs	r0, r4
 80009fe:	4914      	ldr	r1, [pc, #80]	; (8000a50 <Protocol+0x170>)
 8000a00:	f7ff fb82 	bl	8000108 <strcmp>
 8000a04:	2800      	cmp	r0, #0
 8000a06:	d000      	beq.n	8000a0a <Protocol+0x12a>
 8000a08:	e790      	b.n	800092c <Protocol+0x4c>
		LuxOut = 0;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <Protocol+0x16c>)
 8000a0c:	7018      	strb	r0, [r3, #0]
}
 8000a0e:	e78d      	b.n	800092c <Protocol+0x4c>
 8000a10:	20000072 	.word	0x20000072
 8000a14:	08001f3c 	.word	0x08001f3c
 8000a18:	08001f47 	.word	0x08001f47
 8000a1c:	2000004a 	.word	0x2000004a
 8000a20:	08001f9d 	.word	0x08001f9d
 8000a24:	20000062 	.word	0x20000062
 8000a28:	08001f72 	.word	0x08001f72
 8000a2c:	08001f4e 	.word	0x08001f4e
 8000a30:	08001f57 	.word	0x08001f57
 8000a34:	20000030 	.word	0x20000030
 8000a38:	08001f5c 	.word	0x08001f5c
 8000a3c:	08001f68 	.word	0x08001f68
 8000a40:	08001f75 	.word	0x08001f75
 8000a44:	08001f7f 	.word	0x08001f7f
 8000a48:	08001f8a 	.word	0x08001f8a
 8000a4c:	200000b2 	.word	0x200000b2
 8000a50:	08001f91 	.word	0x08001f91

08000a54 <HAL_GPIO_EXTI_Callback>:
	SystemClock_Config();
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	key_done = 0;
 8000a54:	2200      	movs	r2, #0
{
 8000a56:	b570      	push	{r4, r5, r6, lr}
	key_done = 0;
 8000a58:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <HAL_GPIO_EXTI_Callback+0x78>)
	if(GPIO_Pin == KEY_UP_Pin)
	{
		//POWER ON
		if( (!flag_power_on) && (!flag_stop_mode) )
 8000a5a:	4d1d      	ldr	r5, [pc, #116]	; (8000ad0 <HAL_GPIO_EXTI_Callback+0x7c>)
	key_done = 0;
 8000a5c:	701a      	strb	r2, [r3, #0]
	if(GPIO_Pin == KEY_UP_Pin)
 8000a5e:	4c1d      	ldr	r4, [pc, #116]	; (8000ad4 <HAL_GPIO_EXTI_Callback+0x80>)
		if( (!flag_power_on) && (!flag_stop_mode) )
 8000a60:	782b      	ldrb	r3, [r5, #0]
	if(GPIO_Pin == KEY_UP_Pin)
 8000a62:	2802      	cmp	r0, #2
 8000a64:	d123      	bne.n	8000aae <HAL_GPIO_EXTI_Callback+0x5a>
		if( (!flag_power_on) && (!flag_stop_mode) )
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d112      	bne.n	8000a90 <HAL_GPIO_EXTI_Callback+0x3c>
 8000a6a:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <HAL_GPIO_EXTI_Callback+0x84>)
 8000a6c:	7812      	ldrb	r2, [r2, #0]
 8000a6e:	2a00      	cmp	r2, #0
 8000a70:	d10e      	bne.n	8000a90 <HAL_GPIO_EXTI_Callback+0x3c>
		{
			key_pos = Default_LED;
 8000a72:	2308      	movs	r3, #8
 8000a74:	7023      	strb	r3, [r4, #0]
	}
//	flag_stop_mode = 1;
	//POWER off
	if(!flag_power_on)
	{
		if(!HAL_GPIO_ReadPin(BATT_DET_GPIO_Port, BATT_DET_Pin))
 8000a76:	20a0      	movs	r0, #160	; 0xa0
 8000a78:	2140      	movs	r1, #64	; 0x40
 8000a7a:	05c0      	lsls	r0, r0, #23
 8000a7c:	f000 ff32 	bl	80018e4 <HAL_GPIO_ReadPin>
 8000a80:	2800      	cmp	r0, #0
 8000a82:	d10a      	bne.n	8000a9a <HAL_GPIO_EXTI_Callback+0x46>
		{
			flag_low_batt = 1;
 8000a84:	2201      	movs	r2, #1
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_GPIO_EXTI_Callback+0x88>)
 8000a88:	701a      	strb	r2, [r3, #0]
			flag_stop_mode = 0;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <HAL_GPIO_EXTI_Callback+0x84>)
 8000a8c:	7018      	strb	r0, [r3, #0]
 8000a8e:	e004      	b.n	8000a9a <HAL_GPIO_EXTI_Callback+0x46>
			key_pos++;
 8000a90:	7822      	ldrb	r2, [r4, #0]
 8000a92:	3201      	adds	r2, #1
			key_pos--;
 8000a94:	7022      	strb	r2, [r4, #0]
	if(!flag_power_on)
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0ed      	beq.n	8000a76 <HAL_GPIO_EXTI_Callback+0x22>
	//	else if(GPIO_Pin == BATT_DET_Pin)
	//	{
	//		flag_low_batt = 1;
	//	}

	if (key_pos < 1) key_pos = 1;
 8000a9a:	7822      	ldrb	r2, [r4, #0]
 8000a9c:	1e53      	subs	r3, r2, #1
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2bfd      	cmp	r3, #253	; 0xfd
 8000aa2:	d90f      	bls.n	8000ac4 <HAL_GPIO_EXTI_Callback+0x70>
 8000aa4:	2301      	movs	r3, #1
	else if( key_pos == 255) key_pos = 1;
	else if (key_pos > 12) key_pos = 12;
 8000aa6:	7023      	strb	r3, [r4, #0]

	flag_power_on = 1;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	702b      	strb	r3, [r5, #0]
}
 8000aac:	bd70      	pop	{r4, r5, r6, pc}
	else if(GPIO_Pin == KEY_DOWN_Pin)
 8000aae:	2820      	cmp	r0, #32
 8000ab0:	d1f1      	bne.n	8000a96 <HAL_GPIO_EXTI_Callback+0x42>
		if( (!flag_power_on) && (!flag_stop_mode) )
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d103      	bne.n	8000abe <HAL_GPIO_EXTI_Callback+0x6a>
 8000ab6:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_GPIO_EXTI_Callback+0x84>)
 8000ab8:	7812      	ldrb	r2, [r2, #0]
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	d0d9      	beq.n	8000a72 <HAL_GPIO_EXTI_Callback+0x1e>
			key_pos--;
 8000abe:	7822      	ldrb	r2, [r4, #0]
 8000ac0:	3a01      	subs	r2, #1
 8000ac2:	e7e7      	b.n	8000a94 <HAL_GPIO_EXTI_Callback+0x40>
	else if (key_pos > 12) key_pos = 12;
 8000ac4:	2a0c      	cmp	r2, #12
 8000ac6:	d9ef      	bls.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x54>
 8000ac8:	230c      	movs	r3, #12
 8000aca:	e7ec      	b.n	8000aa6 <HAL_GPIO_EXTI_Callback+0x52>
 8000acc:	20000003 	.word	0x20000003
 8000ad0:	20000001 	.word	0x20000001
 8000ad4:	20000004 	.word	0x20000004
 8000ad8:	20000002 	.word	0x20000002
 8000adc:	200000bb 	.word	0x200000bb

08000ae0 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	4a2c      	ldr	r2, [pc, #176]	; (8000b94 <SystemClock_Config+0xb4>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae4:	b510      	push	{r4, lr}
 8000ae6:	6811      	ldr	r1, [r2, #0]
 8000ae8:	4399      	bics	r1, r3
 8000aea:	6011      	str	r1, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000aec:	6811      	ldr	r1, [r2, #0]
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000aee:	4219      	tst	r1, r3
 8000af0:	d1fc      	bne.n	8000aec <SystemClock_Config+0xc>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000af2:	4829      	ldr	r0, [pc, #164]	; (8000b98 <SystemClock_Config+0xb8>)
 8000af4:	4929      	ldr	r1, [pc, #164]	; (8000b9c <SystemClock_Config+0xbc>)
 8000af6:	6802      	ldr	r2, [r0, #0]
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000af8:	4c29      	ldr	r4, [pc, #164]	; (8000ba0 <SystemClock_Config+0xc0>)
 8000afa:	4011      	ands	r1, r2
 8000afc:	2280      	movs	r2, #128	; 0x80
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	430a      	orrs	r2, r1
 8000b02:	6002      	str	r2, [r0, #0]
 8000b04:	6822      	ldr	r2, [r4, #0]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	6822      	ldr	r2, [r4, #0]
 8000b0e:	421a      	tst	r2, r3
 8000b10:	d0fc      	beq.n	8000b0c <SystemClock_Config+0x2c>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000b12:	6863      	ldr	r3, [r4, #4]
 8000b14:	4a23      	ldr	r2, [pc, #140]	; (8000ba4 <SystemClock_Config+0xc4>)
 8000b16:	401a      	ands	r2, r3
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	015b      	lsls	r3, r3, #5
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	6063      	str	r3, [r4, #4]
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000b20:	2301      	movs	r3, #1
 8000b22:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000b24:	4313      	orrs	r3, r2
 8000b26:	6523      	str	r3, [r4, #80]	; 0x50
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 8000b28:	2302      	movs	r3, #2
 8000b2a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000b2c:	421a      	tst	r2, r3
 8000b2e:	d0fc      	beq.n	8000b2a <SystemClock_Config+0x4a>
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000b30:	22f0      	movs	r2, #240	; 0xf0
 8000b32:	68e3      	ldr	r3, [r4, #12]
 8000b34:	4393      	bics	r3, r2
 8000b36:	60e3      	str	r3, [r4, #12]
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000b38:	68e3      	ldr	r3, [r4, #12]
 8000b3a:	4a1b      	ldr	r2, [pc, #108]	; (8000ba8 <SystemClock_Config+0xc8>)
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60e3      	str	r3, [r4, #12]
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000b40:	68e3      	ldr	r3, [r4, #12]
 8000b42:	4a1a      	ldr	r2, [pc, #104]	; (8000bac <SystemClock_Config+0xcc>)
 8000b44:	4013      	ands	r3, r2
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000b46:	2203      	movs	r2, #3
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000b48:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000b4a:	68e3      	ldr	r3, [r4, #12]
 8000b4c:	4393      	bics	r3, r2
 8000b4e:	001a      	movs	r2, r3
 8000b50:	2301      	movs	r3, #1
 8000b52:	4313      	orrs	r3, r2
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b54:	220c      	movs	r2, #12
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000b56:	60e3      	str	r3, [r4, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b58:	68e3      	ldr	r3, [r4, #12]
 8000b5a:	4013      	ands	r3, r2
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	d1fb      	bne.n	8000b58 <SystemClock_Config+0x78>
  {

  }
  LL_SetSystemCoreClock(16000000);
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <SystemClock_Config+0xd0>)
 8000b62:	f001 f9a3 	bl	8001eac <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000b66:	2003      	movs	r0, #3
 8000b68:	f000 fd54 	bl	8001614 <HAL_InitTick>
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0x94>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <SystemClock_Config+0x92>
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPUARTClockSource(uint32_t LPUARTxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8000b74:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000b76:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <SystemClock_Config+0xd4>)
 8000b78:	401a      	ands	r2, r3
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	011b      	lsls	r3, r3, #4
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	64e3      	str	r3, [r4, #76]	; 0x4c
  *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPTIM1SEL, LPTIMxSource);
 8000b82:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000b84:	4a0c      	ldr	r2, [pc, #48]	; (8000bb8 <SystemClock_Config+0xd8>)
 8000b86:	401a      	ands	r2, r3
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	02db      	lsls	r3, r3, #11
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8000b90:	bd10      	pop	{r4, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	40022000 	.word	0x40022000
 8000b98:	40007000 	.word	0x40007000
 8000b9c:	ffffe7ff 	.word	0xffffe7ff
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	ffffe0ff 	.word	0xffffe0ff
 8000ba8:	fffff8ff 	.word	0xfffff8ff
 8000bac:	ffffc7ff 	.word	0xffffc7ff
 8000bb0:	00f42400 	.word	0x00f42400
 8000bb4:	fffff3ff 	.word	0xfffff3ff
 8000bb8:	fff3ffff 	.word	0xfff3ffff

08000bbc <StopMode>:
{
 8000bbc:	b510      	push	{r4, lr}
	HAL_SuspendTick();
 8000bbe:	f000 fd85 	bl	80016cc <HAL_SuspendTick>
	__HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <StopMode+0x24>)
 8000bc6:	055b      	lsls	r3, r3, #21
 8000bc8:	6b91      	ldr	r1, [r2, #56]	; 0x38
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFE);
 8000bca:	2001      	movs	r0, #1
	__HAL_RCC_PWR_CLK_ENABLE();
 8000bcc:	430b      	orrs	r3, r1
 8000bce:	6393      	str	r3, [r2, #56]	; 0x38
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFE);
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	f000 ffc3 	bl	8001b5c <HAL_PWR_EnterSTOPMode>
	HAL_ResumeTick();
 8000bd6:	f000 fd81 	bl	80016dc <HAL_ResumeTick>
	SystemClock_Config();
 8000bda:	f7ff ff81 	bl	8000ae0 <SystemClock_Config>
}
 8000bde:	bd10      	pop	{r4, pc}
 8000be0:	40021000 	.word	0x40021000

08000be4 <main>:
{
 8000be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be6:	b099      	sub	sp, #100	; 0x64
  HAL_Init();
 8000be8:	f000 fd38 	bl	800165c <HAL_Init>
  hlptim1.Instance = LPTIM1;
 8000bec:	4808      	ldr	r0, [pc, #32]	; (8000c10 <main+0x2c>)
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <main+0x30>)
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000bf0:	4a09      	ldr	r2, [pc, #36]	; (8000c18 <main+0x34>)
  hlptim1.Instance = LPTIM1;
 8000bf2:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000bf4:	2300      	movs	r3, #0
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000bf6:	6142      	str	r2, [r0, #20]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000bf8:	6043      	str	r3, [r0, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000bfa:	6083      	str	r3, [r0, #8]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000bfc:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000bfe:	6243      	str	r3, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000c00:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000c02:	f000 fea5 	bl	8001950 <HAL_LPTIM_Init>
 8000c06:	1e05      	subs	r5, r0, #0
 8000c08:	d008      	beq.n	8000c1c <main+0x38>
 8000c0a:	b672      	cpsid	i
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <main+0x28>
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	200000bc 	.word	0x200000bc
 8000c14:	40007c00 	.word	0x40007c00
 8000c18:	0000ffff 	.word	0x0000ffff
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	2702      	movs	r7, #2
  time_setup();
 8000c20:	f000 fbcc 	bl	80013bc <time_setup>
  SystemClock_Config();
 8000c24:	f7ff ff5c 	bl	8000ae0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	0029      	movs	r1, r5
 8000c2a:	2214      	movs	r2, #20
 8000c2c:	a812      	add	r0, sp, #72	; 0x48
 8000c2e:	f001 f970 	bl	8001f12 <memset>
  HAL_GPIO_WritePin(GPIOA, CDS_En_Pin|CH_SEL1_Pin|CH_SEL2_Pin, GPIO_PIN_RESET);
 8000c32:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	4ce5      	ldr	r4, [pc, #916]	; (8000fcc <main+0x3e8>)
  HAL_GPIO_WritePin(GPIOA, CDS_En_Pin|CH_SEL1_Pin|CH_SEL2_Pin, GPIO_PIN_RESET);
 8000c36:	002a      	movs	r2, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, CDS_En_Pin|CH_SEL1_Pin|CH_SEL2_Pin, GPIO_PIN_RESET);
 8000c3a:	49e5      	ldr	r1, [pc, #916]	; (8000fd0 <main+0x3ec>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4333      	orrs	r3, r6
 8000c3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, CDS_En_Pin|CH_SEL1_Pin|CH_SEL2_Pin, GPIO_PIN_RESET);
 8000c42:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	4033      	ands	r3, r6
 8000c46:	9302      	str	r3, [sp, #8]
 8000c48:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c4c:	433b      	orrs	r3, r7
 8000c4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c52:	403b      	ands	r3, r7
 8000c54:	9303      	str	r3, [sp, #12]
 8000c56:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, CDS_En_Pin|CH_SEL1_Pin|CH_SEL2_Pin, GPIO_PIN_RESET);
 8000c58:	f000 fe4a 	bl	80018f0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = CDS_En_Pin|CH_SEL1_Pin|CH_SEL2_Pin;
 8000c5e:	4bdc      	ldr	r3, [pc, #880]	; (8000fd0 <main+0x3ec>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	a912      	add	r1, sp, #72	; 0x48
 8000c62:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = CDS_En_Pin|CH_SEL1_Pin|CH_SEL2_Pin;
 8000c64:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	9514      	str	r5, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	9613      	str	r6, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f000 fd8e 	bl	800178c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEY_UP_Pin|KEY_ON_Pin|KEY_DOWN_Pin|BATT_DET_Pin;
 8000c70:	2372      	movs	r3, #114	; 0x72
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = KEY_UP_Pin|KEY_ON_Pin|KEY_DOWN_Pin|BATT_DET_Pin;
 8000c74:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c76:	2384      	movs	r3, #132	; 0x84
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c7a:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c7e:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c80:	9614      	str	r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f000 fd83 	bl	800178c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8000c86:	002a      	movs	r2, r5
 8000c88:	2103      	movs	r1, #3
 8000c8a:	2005      	movs	r0, #5
 8000c8c:	f000 fd2e 	bl	80016ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000c90:	2005      	movs	r0, #5
 8000c92:	f000 fd55 	bl	8001740 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8000c96:	002a      	movs	r2, r5
 8000c98:	2103      	movs	r1, #3
 8000c9a:	2007      	movs	r0, #7
 8000c9c:	f000 fd26 	bl	80016ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000ca0:	2007      	movs	r0, #7
 8000ca2:	f000 fd4d 	bl	8001740 <HAL_NVIC_EnableIRQ>
  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8000ca6:	0029      	movs	r1, r5
 8000ca8:	2218      	movs	r2, #24
 8000caa:	a80c      	add	r0, sp, #48	; 0x30
 8000cac:	f001 f931 	bl	8001f12 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000cb0:	2180      	movs	r1, #128	; 0x80
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	9515      	str	r5, [sp, #84]	; 0x54
 8000cb4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000cb6:	02c9      	lsls	r1, r1, #11
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	63a2      	str	r2, [r4, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000cbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000cbe:	2206      	movs	r2, #6
 8000cc0:	400b      	ands	r3, r1
 8000cc2:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8000cc4:	9b05      	ldr	r3, [sp, #20]
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000cc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	a912      	add	r1, sp, #72	; 0x48
 8000cca:	433b      	orrs	r3, r7
 8000ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000cce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000cd0:	48c0      	ldr	r0, [pc, #768]	; (8000fd4 <main+0x3f0>)
 8000cd2:	403b      	ands	r3, r7
 8000cd4:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8000cd6:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000cd8:	2340      	movs	r3, #64	; 0x40
 8000cda:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	3b3d      	subs	r3, #61	; 0x3d
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cde:	9713      	str	r7, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000ce2:	9217      	str	r2, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000ce4:	9616      	str	r6, [sp, #88]	; 0x58
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f000 ffab 	bl	8001c40 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000cea:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000cec:	2206      	movs	r2, #6
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000cee:	9312      	str	r3, [sp, #72]	; 0x48
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf0:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	3b7d      	subs	r3, #125	; 0x7d
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	48b7      	ldr	r0, [pc, #732]	; (8000fd4 <main+0x3f0>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cf6:	9713      	str	r7, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cfa:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000cfc:	9217      	str	r2, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000cfe:	9616      	str	r6, [sp, #88]	; 0x58
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f000 ff9e 	bl	8001c40 <LL_GPIO_Init>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d04:	21c7      	movs	r1, #199	; 0xc7
 8000d06:	4fb4      	ldr	r7, [pc, #720]	; (8000fd8 <main+0x3f4>)
 8000d08:	0089      	lsls	r1, r1, #2
 8000d0a:	587b      	ldr	r3, [r7, r1]
 8000d0c:	4ab3      	ldr	r2, [pc, #716]	; (8000fdc <main+0x3f8>)
 8000d0e:	401a      	ands	r2, r3
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	4313      	orrs	r3, r2
 8000d16:	507b      	str	r3, [r7, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	059b      	lsls	r3, r3, #22
 8000d1c:	603b      	str	r3, [r7, #0]
  LPUART_InitStruct.BaudRate = 9600;
 8000d1e:	2396      	movs	r3, #150	; 0x96
 8000d20:	019b      	lsls	r3, r3, #6
 8000d22:	930c      	str	r3, [sp, #48]	; 0x30
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 8000d24:	230c      	movs	r3, #12
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 8000d26:	950d      	str	r5, [sp, #52]	; 0x34
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 8000d28:	950e      	str	r5, [sp, #56]	; 0x38
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 8000d2a:	950f      	str	r5, [sp, #60]	; 0x3c
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 8000d2c:	9511      	str	r5, [sp, #68]	; 0x44
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 8000d2e:	4dac      	ldr	r5, [pc, #688]	; (8000fe0 <main+0x3fc>)
 8000d30:	a90c      	add	r1, sp, #48	; 0x30
 8000d32:	0028      	movs	r0, r5
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 8000d34:	9310      	str	r3, [sp, #64]	; 0x40
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 8000d36:	f000 ffd5 	bl	8001ce4 <LL_LPUART_Init>
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8000d3a:	682b      	ldr	r3, [r5, #0]
 8000d3c:	4333      	orrs	r3, r6
 8000d3e:	602b      	str	r3, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d40:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d44:	f386 8810 	msr	PRIMASK, r6
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_RXNE(USART_TypeDef *LPUARTx)
{
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE);
 8000d48:	2320      	movs	r3, #32
 8000d4a:	6829      	ldr	r1, [r5, #0]
 8000d4c:	430b      	orrs	r3, r1
 8000d4e:	602b      	str	r3, [r5, #0]
 8000d50:	f382 8810 	msr	PRIMASK, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d54:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d58:	f386 8810 	msr	PRIMASK, r6
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_TE);
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	6829      	ldr	r1, [r5, #0]
 8000d60:	430b      	orrs	r3, r1
 8000d62:	602b      	str	r3, [r5, #0]
 8000d64:	f382 8810 	msr	PRIMASK, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d68:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d6c:	f386 8810 	msr	PRIMASK, r6
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RE);
 8000d70:	2304      	movs	r3, #4
 8000d72:	6829      	ldr	r1, [r5, #0]
 8000d74:	430b      	orrs	r3, r1
 8000d76:	602b      	str	r3, [r5, #0]
 8000d78:	f382 8810 	msr	PRIMASK, r2
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000d7c:	2180      	movs	r1, #128	; 0x80
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000d7e:	2380      	movs	r3, #128	; 0x80
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000d80:	0389      	lsls	r1, r1, #14
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000d82:	03db      	lsls	r3, r3, #15
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000d84:	69ea      	ldr	r2, [r5, #28]
 8000d86:	420a      	tst	r2, r1
 8000d88:	d0fc      	beq.n	8000d84 <main+0x1a0>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000d8a:	69ea      	ldr	r2, [r5, #28]
 8000d8c:	421a      	tst	r2, r3
 8000d8e:	d0f9      	beq.n	8000d84 <main+0x1a0>
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d90:	2580      	movs	r5, #128	; 0x80
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000d92:	2214      	movs	r2, #20
 8000d94:	2100      	movs	r1, #0
 8000d96:	a80c      	add	r0, sp, #48	; 0x30
 8000d98:	f001 f8bb 	bl	8001f12 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000d9c:	2210      	movs	r2, #16
 8000d9e:	2100      	movs	r1, #0
 8000da0:	a808      	add	r0, sp, #32
 8000da2:	f001 f8b6 	bl	8001f12 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	2210      	movs	r2, #16
 8000da8:	2100      	movs	r1, #0
 8000daa:	a814      	add	r0, sp, #80	; 0x50
 8000dac:	f001 f8b1 	bl	8001f12 <memset>
 8000db0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000db2:	00ad      	lsls	r5, r5, #2
 8000db4:	432b      	orrs	r3, r5
 8000db6:	6363      	str	r3, [r4, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000db8:	6b63      	ldr	r3, [r4, #52]	; 0x34
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dba:	a912      	add	r1, sp, #72	; 0x48
 8000dbc:	402b      	ands	r3, r5
 8000dbe:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
 8000dc0:	9b07      	ldr	r3, [sp, #28]
  SET_BIT(RCC->IOPENR, Periphs);
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000dc6:	4883      	ldr	r0, [pc, #524]	; (8000fd4 <main+0x3f0>)
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	62e2      	str	r2, [r4, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000dcc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000dce:	9312      	str	r3, [sp, #72]	; 0x48
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	9206      	str	r2, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000dd4:	3301      	adds	r3, #1
  (void)tmpreg;
 8000dd6:	9a06      	ldr	r2, [sp, #24]
 8000dd8:	9313      	str	r3, [sp, #76]	; 0x4c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dda:	f000 ff31 	bl	8001c40 <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dde:	22c3      	movs	r2, #195	; 0xc3
 8000de0:	21ff      	movs	r1, #255	; 0xff
 8000de2:	0092      	lsls	r2, r2, #2
 8000de4:	58bb      	ldr	r3, [r7, r2]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000de6:	4c7f      	ldr	r4, [pc, #508]	; (8000fe4 <main+0x400>)
 8000de8:	438b      	bics	r3, r1
 8000dea:	50bb      	str	r3, [r7, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	015b      	lsls	r3, r3, #5
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000df4:	a90c      	add	r1, sp, #48	; 0x30
 8000df6:	431d      	orrs	r5, r3
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	62a5      	str	r5, [r4, #40]	; 0x28
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000dfc:	2500      	movs	r5, #0
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 8000dfe:	025b      	lsls	r3, r3, #9
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000e00:	0020      	movs	r0, r4
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 8000e02:	930d      	str	r3, [sp, #52]	; 0x34
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000e04:	950c      	str	r5, [sp, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000e06:	950e      	str	r5, [sp, #56]	; 0x38
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000e08:	950f      	str	r5, [sp, #60]	; 0x3c
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000e0a:	9510      	str	r5, [sp, #64]	; 0x40
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000e0c:	f000 fefe 	bl	8001c0c <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000e10:	2207      	movs	r2, #7
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8000e12:	2701      	movs	r7, #1
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e14:	2680      	movs	r6, #128	; 0x80
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000e16:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8000e18:	4973      	ldr	r1, [pc, #460]	; (8000fe8 <main+0x404>)
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	6163      	str	r3, [r4, #20]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8000e1e:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000e20:	3a03      	subs	r2, #3
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8000e22:	43bb      	bics	r3, r7
 8000e24:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000e26:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8000e28:	4870      	ldr	r0, [pc, #448]	; (8000fec <main+0x408>)
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000e2a:	4393      	bics	r3, r2
 8000e2c:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8000e2e:	680b      	ldr	r3, [r1, #0]
 8000e30:	0636      	lsls	r6, r6, #24
 8000e32:	4003      	ands	r3, r0
 8000e34:	600b      	str	r3, [r1, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000e36:	6863      	ldr	r3, [r4, #4]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000e38:	a908      	add	r1, sp, #32
 8000e3a:	4393      	bics	r3, r2
 8000e3c:	6063      	str	r3, [r4, #4]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000e3e:	6863      	ldr	r3, [r4, #4]
 8000e40:	3204      	adds	r2, #4
 8000e42:	4393      	bics	r3, r2
 8000e44:	6063      	str	r3, [r4, #4]
 8000e46:	0020      	movs	r0, r4
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e48:	9608      	str	r6, [sp, #32]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000e4a:	9509      	str	r5, [sp, #36]	; 0x24
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000e4c:	950a      	str	r5, [sp, #40]	; 0x28
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000e4e:	950b      	str	r5, [sp, #44]	; 0x2c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000e50:	f000 fec0 	bl	8001bd4 <LL_ADC_Init>
  MODIFY_REG(ADCx->CR,
 8000e54:	68a3      	ldr	r3, [r4, #8]
 8000e56:	4a66      	ldr	r2, [pc, #408]	; (8000ff0 <main+0x40c>)
  MODIFY_REG(ADCx->CR,
 8000e58:	4966      	ldr	r1, [pc, #408]	; (8000ff4 <main+0x410>)
  MODIFY_REG(ADCx->CR,
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	055b      	lsls	r3, r3, #21
 8000e60:	4313      	orrs	r3, r2
 8000e62:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(ADCx->CR,
 8000e64:	68a2      	ldr	r2, [r4, #8]
 8000e66:	400a      	ands	r2, r1
 8000e68:	4317      	orrs	r7, r2
 8000e6a:	60a7      	str	r7, [r4, #8]
  MODIFY_REG(ADCx->CR,
 8000e6c:	68a3      	ldr	r3, [r4, #8]
 8000e6e:	400b      	ands	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	60a6      	str	r6, [r4, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8000e74:	68a3      	ldr	r3, [r4, #8]
  while(LL_ADC_IsCalibrationOnGoing(ADC1)); //
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	dbfc      	blt.n	8000e74 <main+0x290>
		  CDSLight[i] = 800;
 8000e7a:	24c8      	movs	r4, #200	; 0xc8
  ReadSystemConfig();
 8000e7c:	f7ff fc06 	bl	800068c <ReadSystemConfig>
  for(i = 0; i < 12; i++)
 8000e80:	2100      	movs	r1, #0
		  LedLight[i] = 123;
 8000e82:	207b      	movs	r0, #123	; 0x7b
 8000e84:	4b5c      	ldr	r3, [pc, #368]	; (8000ff8 <main+0x414>)
  ReadSystemConfig();
 8000e86:	4a5d      	ldr	r2, [pc, #372]	; (8000ffc <main+0x418>)
		  CDSLight[i] = 800;
 8000e88:	00a4      	lsls	r4, r4, #2
	  if( ( LedLight[i] == 0x0 ) || ( LedLight[i] == 0xFFFFFFFF ) )
 8000e8a:	881d      	ldrh	r5, [r3, #0]
 8000e8c:	2d00      	cmp	r5, #0
 8000e8e:	d100      	bne.n	8000e92 <main+0x2ae>
		  LedLight[i] = 123;
 8000e90:	8018      	strh	r0, [r3, #0]
	  if( ( CDSLight[i] == 0x0 ) || ( CDSLight[i] == 0xFFFFFFFF ) )
 8000e92:	8815      	ldrh	r5, [r2, #0]
 8000e94:	2d00      	cmp	r5, #0
 8000e96:	d100      	bne.n	8000e9a <main+0x2b6>
		  CDSLight[i] = 800;
 8000e98:	8014      	strh	r4, [r2, #0]
  for(i = 0; i < 12; i++)
 8000e9a:	3101      	adds	r1, #1
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	3202      	adds	r2, #2
 8000ea0:	290c      	cmp	r1, #12
 8000ea2:	d1f2      	bne.n	8000e8a <main+0x2a6>
	uint16_t cds = 0;
 8000ea4:	2300      	movs	r3, #0
			HAL_LPTIM_PWM_Start(&hlptim1, PERIOD, LedLight[LedLevel]);
 8000ea6:	279a      	movs	r7, #154	; 0x9a
				HAL_GPIO_WritePin(CH_SEL1_GPIO_Port, CH_SEL1_Pin, RESET);
 8000ea8:	2480      	movs	r4, #128	; 0x80
	uint16_t cds = 0;
 8000eaa:	9301      	str	r3, [sp, #4]
			HAL_LPTIM_PWM_Start(&hlptim1, PERIOD, LedLight[LedLevel]);
 8000eac:	00bf      	lsls	r7, r7, #2
				HAL_GPIO_WritePin(CH_SEL1_GPIO_Port, CH_SEL1_Pin, RESET);
 8000eae:	00a4      	lsls	r4, r4, #2
		if(isReadyByte() && SetLuxMode)
 8000eb0:	f000 fad2 	bl	8001458 <isReadyByte>
 8000eb4:	4d52      	ldr	r5, [pc, #328]	; (8001000 <main+0x41c>)
 8000eb6:	2800      	cmp	r0, #0
 8000eb8:	d006      	beq.n	8000ec8 <main+0x2e4>
 8000eba:	782b      	ldrb	r3, [r5, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d03f      	beq.n	8000f40 <main+0x35c>
			Protocol((char *)GetUART());
 8000ec0:	f000 fad0 	bl	8001464 <GetUART>
 8000ec4:	f7ff fd0c 	bl	80008e0 <Protocol>
		if(SetLuxMode)
 8000ec8:	782b      	ldrb	r3, [r5, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d038      	beq.n	8000f40 <main+0x35c>
			cds = GetADC(0);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f7ff fc36 	bl	8000740 <GetADC>
			if(CDSLight[0] >= cds) level = 0;
 8000ed4:	4b49      	ldr	r3, [pc, #292]	; (8000ffc <main+0x418>)
			cds = GetADC(0);
 8000ed6:	0001      	movs	r1, r0
			if(CDSLight[0] >= cds) level = 0;
 8000ed8:	881a      	ldrh	r2, [r3, #0]
			cds = GetADC(0);
 8000eda:	9001      	str	r0, [sp, #4]
			if(CDSLight[0] >= cds) level = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	4282      	cmp	r2, r0
 8000ee0:	d20a      	bcs.n	8000ef8 <main+0x314>
 8000ee2:	4a46      	ldr	r2, [pc, #280]	; (8000ffc <main+0x418>)
				for(i = 1; i < MAX_LEVEL; i++) {
 8000ee4:	3301      	adds	r3, #1
					if(CDSLight[i - 1] < cds && CDSLight[i] >= cds) {
 8000ee6:	8810      	ldrh	r0, [r2, #0]
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	d300      	bcc.n	8000eee <main+0x30a>
 8000eec:	e0cc      	b.n	8001088 <main+0x4a4>
 8000eee:	8850      	ldrh	r0, [r2, #2]
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	d200      	bcs.n	8000ef6 <main+0x312>
 8000ef4:	e0c8      	b.n	8001088 <main+0x4a4>
						level = i;
 8000ef6:	b2db      	uxtb	r3, r3
			LedLevel = level;
 8000ef8:	4a42      	ldr	r2, [pc, #264]	; (8001004 <main+0x420>)
			HAL_LPTIM_PWM_Start(&hlptim1, PERIOD, LedLight[LedLevel]);
 8000efa:	0039      	movs	r1, r7
			LedLevel = level;
 8000efc:	7013      	strb	r3, [r2, #0]
			HAL_LPTIM_PWM_Start(&hlptim1, PERIOD, LedLight[LedLevel]);
 8000efe:	4a3e      	ldr	r2, [pc, #248]	; (8000ff8 <main+0x414>)
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	5ad2      	ldrh	r2, [r2, r3]
 8000f04:	4840      	ldr	r0, [pc, #256]	; (8001008 <main+0x424>)
 8000f06:	f000 fd79 	bl	80019fc <HAL_LPTIM_PWM_Start>
			switch(flag_led_mode)
 8000f0a:	4b40      	ldr	r3, [pc, #256]	; (800100c <main+0x428>)
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	b2d3      	uxtb	r3, r2
 8000f10:	2a02      	cmp	r2, #2
 8000f12:	d100      	bne.n	8000f16 <main+0x332>
 8000f14:	e0bf      	b.n	8001096 <main+0x4b2>
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d100      	bne.n	8000f1c <main+0x338>
 8000f1a:	e0c4      	b.n	80010a6 <main+0x4c2>
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d10c      	bne.n	8000f3a <main+0x356>
				HAL_GPIO_WritePin(CH_SEL1_GPIO_Port, CH_SEL1_Pin, RESET);
 8000f20:	20a0      	movs	r0, #160	; 0xa0
 8000f22:	2200      	movs	r2, #0
 8000f24:	0021      	movs	r1, r4
 8000f26:	05c0      	lsls	r0, r0, #23
 8000f28:	f000 fce2 	bl	80018f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(CH_SEL2_GPIO_Port, CH_SEL2_Pin, RESET);
 8000f2c:	2200      	movs	r2, #0
				HAL_GPIO_WritePin(CH_SEL2_GPIO_Port, CH_SEL2_Pin, SET);
 8000f2e:	2180      	movs	r1, #128	; 0x80
 8000f30:	20a0      	movs	r0, #160	; 0xa0
 8000f32:	00c9      	lsls	r1, r1, #3
 8000f34:	05c0      	lsls	r0, r0, #23
 8000f36:	f000 fcdb 	bl	80018f0 <HAL_GPIO_WritePin>
			flag_stop_mode = 0;
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4b34      	ldr	r3, [pc, #208]	; (8001010 <main+0x42c>)
 8000f3e:	701a      	strb	r2, [r3, #0]
		if(flag_power_on)
 8000f40:	4b34      	ldr	r3, [pc, #208]	; (8001014 <main+0x430>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d011      	beq.n	8000f6c <main+0x388>
			if(flag_stop_mode)
 8000f48:	4e31      	ldr	r6, [pc, #196]	; (8001010 <main+0x42c>)
 8000f4a:	7833      	ldrb	r3, [r6, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00d      	beq.n	8000f6c <main+0x388>
				HAL_LPTIM_PWM_Start(&hlptim1, PERIOD, LedLight[key_pos-1]);
 8000f50:	4b31      	ldr	r3, [pc, #196]	; (8001018 <main+0x434>)
 8000f52:	4a29      	ldr	r2, [pc, #164]	; (8000ff8 <main+0x414>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	0039      	movs	r1, r7
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	5ad2      	ldrh	r2, [r2, r3]
 8000f5e:	482a      	ldr	r0, [pc, #168]	; (8001008 <main+0x424>)
 8000f60:	f000 fd4c 	bl	80019fc <HAL_LPTIM_PWM_Start>
				flag_stop_mode = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	7033      	strb	r3, [r6, #0]
				StopMode();
 8000f68:	f7ff fe28 	bl	8000bbc <StopMode>
		if ( (time_ms() - last_time) > 10-1 ) //10mS
 8000f6c:	f000 fa48 	bl	8001400 <time_ms>
 8000f70:	4b2a      	ldr	r3, [pc, #168]	; (800101c <main+0x438>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	1ac0      	subs	r0, r0, r3
 8000f76:	2809      	cmp	r0, #9
 8000f78:	d99a      	bls.n	8000eb0 <main+0x2cc>
			if(count_500ms > 25) //100mS
 8000f7a:	4e29      	ldr	r6, [pc, #164]	; (8001020 <main+0x43c>)
 8000f7c:	8833      	ldrh	r3, [r6, #0]
 8000f7e:	2b19      	cmp	r3, #25
 8000f80:	d911      	bls.n	8000fa6 <main+0x3c2>
				if(LuxOut) {
 8000f82:	4b28      	ldr	r3, [pc, #160]	; (8001024 <main+0x440>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00b      	beq.n	8000fa2 <main+0x3be>
					PrintUART(":CDS,");
 8000f8a:	4827      	ldr	r0, [pc, #156]	; (8001028 <main+0x444>)
 8000f8c:	f000 fa3e 	bl	800140c <PrintUART>
					IntToString(cds);
 8000f90:	9801      	ldr	r0, [sp, #4]
 8000f92:	f7ff fc7f 	bl	8000894 <IntToString>
					PrintUART(ByteBuffer);
 8000f96:	4825      	ldr	r0, [pc, #148]	; (800102c <main+0x448>)
 8000f98:	f000 fa38 	bl	800140c <PrintUART>
					PrintUART("\r\n");
 8000f9c:	4824      	ldr	r0, [pc, #144]	; (8001030 <main+0x44c>)
 8000f9e:	f000 fa35 	bl	800140c <PrintUART>
				count_500ms = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	8033      	strh	r3, [r6, #0]
			if( (flag_power_on) && (flag_low_batt) && (count_1s > 100-1) )
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <main+0x430>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d100      	bne.n	8000fb0 <main+0x3cc>
 8000fae:	e0d2      	b.n	8001156 <main+0x572>
 8000fb0:	4b20      	ldr	r3, [pc, #128]	; (8001034 <main+0x450>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d100      	bne.n	8000fba <main+0x3d6>
 8000fb8:	e0b2      	b.n	8001120 <main+0x53c>
 8000fba:	491f      	ldr	r1, [pc, #124]	; (8001038 <main+0x454>)
 8000fbc:	880b      	ldrh	r3, [r1, #0]
 8000fbe:	2b63      	cmp	r3, #99	; 0x63
 8000fc0:	d800      	bhi.n	8000fc4 <main+0x3e0>
 8000fc2:	e0c8      	b.n	8001156 <main+0x572>
				if(flag_3_repeat > 5)
 8000fc4:	4a1d      	ldr	r2, [pc, #116]	; (800103c <main+0x458>)
 8000fc6:	4e1e      	ldr	r6, [pc, #120]	; (8001040 <main+0x45c>)
 8000fc8:	7813      	ldrb	r3, [r2, #0]
 8000fca:	e03b      	b.n	8001044 <main+0x460>
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	00000601 	.word	0x00000601
 8000fd4:	50000400 	.word	0x50000400
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	ffff00ff 	.word	0xffff00ff
 8000fe0:	40004800 	.word	0x40004800
 8000fe4:	40012400 	.word	0x40012400
 8000fe8:	40012708 	.word	0x40012708
 8000fec:	fdffffff 	.word	0xfdffffff
 8000ff0:	6fffffe8 	.word	0x6fffffe8
 8000ff4:	7fffffe8 	.word	0x7fffffe8
 8000ff8:	2000004a 	.word	0x2000004a
 8000ffc:	20000030 	.word	0x20000030
 8001000:	200000b3 	.word	0x200000b3
 8001004:	20000048 	.word	0x20000048
 8001008:	200000bc 	.word	0x200000bc
 800100c:	20000000 	.word	0x20000000
 8001010:	20000002 	.word	0x20000002
 8001014:	20000001 	.word	0x20000001
 8001018:	20000004 	.word	0x20000004
 800101c:	200000f0 	.word	0x200000f0
 8001020:	200000b6 	.word	0x200000b6
 8001024:	200000b2 	.word	0x200000b2
 8001028:	08001f99 	.word	0x08001f99
 800102c:	20000062 	.word	0x20000062
 8001030:	08001f72 	.word	0x08001f72
 8001034:	200000bb 	.word	0x200000bb
 8001038:	200000b4 	.word	0x200000b4
 800103c:	200000b8 	.word	0x200000b8
 8001040:	200000ba 	.word	0x200000ba
 8001044:	2b05      	cmp	r3, #5
 8001046:	d930      	bls.n	80010aa <main+0x4c6>
					flag_3_repeat = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	7013      	strb	r3, [r2, #0]
					flag_low_batt = 0;
 800104c:	4a97      	ldr	r2, [pc, #604]	; (80012ac <main+0x6c8>)
					flag_led_on_off = 0;
 800104e:	7033      	strb	r3, [r6, #0]
					flag_low_batt = 0;
 8001050:	7013      	strb	r3, [r2, #0]
					count_1s = 0;
 8001052:	800b      	strh	r3, [r1, #0]
						switch(flag_led_mode)
 8001054:	4b96      	ldr	r3, [pc, #600]	; (80012b0 <main+0x6cc>)
 8001056:	781a      	ldrb	r2, [r3, #0]
 8001058:	b2d3      	uxtb	r3, r2
 800105a:	2a02      	cmp	r2, #2
 800105c:	d100      	bne.n	8001060 <main+0x47c>
 800105e:	e101      	b.n	8001264 <main+0x680>
 8001060:	2b03      	cmp	r3, #3
 8001062:	d100      	bne.n	8001066 <main+0x482>
 8001064:	e106      	b.n	8001274 <main+0x690>
 8001066:	2b01      	cmp	r3, #1
 8001068:	d000      	beq.n	800106c <main+0x488>
 800106a:	e0f7      	b.n	800125c <main+0x678>
							HAL_GPIO_WritePin(CH_SEL1_GPIO_Port, CH_SEL1_Pin, RESET);
 800106c:	20a0      	movs	r0, #160	; 0xa0
 800106e:	2200      	movs	r2, #0
 8001070:	0021      	movs	r1, r4
 8001072:	05c0      	lsls	r0, r0, #23
 8001074:	f000 fc3c 	bl	80018f0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(CH_SEL2_GPIO_Port, CH_SEL2_Pin, RESET);
 8001078:	2200      	movs	r2, #0
							HAL_GPIO_WritePin(CH_SEL2_GPIO_Port, CH_SEL2_Pin, SET);
 800107a:	2180      	movs	r1, #128	; 0x80
 800107c:	20a0      	movs	r0, #160	; 0xa0
 800107e:	00c9      	lsls	r1, r1, #3
 8001080:	05c0      	lsls	r0, r0, #23
 8001082:	f000 fc35 	bl	80018f0 <HAL_GPIO_WritePin>
							break;
 8001086:	e0e9      	b.n	800125c <main+0x678>
				for(i = 1; i < MAX_LEVEL; i++) {
 8001088:	3301      	adds	r3, #1
 800108a:	3202      	adds	r2, #2
 800108c:	2b0c      	cmp	r3, #12
 800108e:	d000      	beq.n	8001092 <main+0x4ae>
 8001090:	e729      	b.n	8000ee6 <main+0x302>
			if(level == MAX_LEVEL) level = MAX_LEVEL - 1;
 8001092:	3b01      	subs	r3, #1
 8001094:	e730      	b.n	8000ef8 <main+0x314>
				HAL_GPIO_WritePin(CH_SEL1_GPIO_Port, CH_SEL1_Pin, RESET);
 8001096:	2200      	movs	r2, #0
				HAL_GPIO_WritePin(CH_SEL1_GPIO_Port, CH_SEL1_Pin, SET);
 8001098:	20a0      	movs	r0, #160	; 0xa0
 800109a:	0021      	movs	r1, r4
 800109c:	05c0      	lsls	r0, r0, #23
 800109e:	f000 fc27 	bl	80018f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(CH_SEL2_GPIO_Port, CH_SEL2_Pin, SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	e743      	b.n	8000f2e <main+0x34a>
				HAL_GPIO_WritePin(CH_SEL1_GPIO_Port, CH_SEL1_Pin, SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	e7f6      	b.n	8001098 <main+0x4b4>
					flag_3_repeat++;
 80010aa:	3301      	adds	r3, #1
 80010ac:	7013      	strb	r3, [r2, #0]
					flag_led_on_off ^= 0x01;
 80010ae:	2301      	movs	r3, #1
 80010b0:	7832      	ldrb	r2, [r6, #0]
 80010b2:	4053      	eors	r3, r2
 80010b4:	7033      	strb	r3, [r6, #0]
					if(flag_led_on_off)
 80010b6:	d02f      	beq.n	8001118 <main+0x534>
						HAL_LPTIM_PWM_Start(&hlptim1, PERIOD, LedLight[key_pos-1]);
 80010b8:	4b7e      	ldr	r3, [pc, #504]	; (80012b4 <main+0x6d0>)
 80010ba:	4a7f      	ldr	r2, [pc, #508]	; (80012b8 <main+0x6d4>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	0039      	movs	r1, r7
 80010c0:	3b01      	subs	r3, #1
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	5ad2      	ldrh	r2, [r2, r3]
 80010c6:	487d      	ldr	r0, [pc, #500]	; (80012bc <main+0x6d8>)
 80010c8:	f000 fc98 	bl	80019fc <HAL_LPTIM_PWM_Start>
					HAL_GPIO_WritePin(CH_SEL1_GPIO_Port, CH_SEL1_Pin, flag_led_on_off);
 80010cc:	20a0      	movs	r0, #160	; 0xa0
 80010ce:	0021      	movs	r1, r4
 80010d0:	7832      	ldrb	r2, [r6, #0]
 80010d2:	05c0      	lsls	r0, r0, #23
 80010d4:	f000 fc0c 	bl	80018f0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(CH_SEL2_GPIO_Port, CH_SEL2_Pin, flag_led_on_off);
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	20a0      	movs	r0, #160	; 0xa0
 80010dc:	7832      	ldrb	r2, [r6, #0]
 80010de:	00c9      	lsls	r1, r1, #3
 80010e0:	05c0      	lsls	r0, r0, #23
 80010e2:	f000 fc05 	bl	80018f0 <HAL_GPIO_WritePin>
				count_1s = 0;
 80010e6:	2200      	movs	r2, #0
 80010e8:	4b75      	ldr	r3, [pc, #468]	; (80012c0 <main+0x6dc>)
 80010ea:	801a      	strh	r2, [r3, #0]
			if(flag_low_batt)	count_1s++;
 80010ec:	4b6f      	ldr	r3, [pc, #444]	; (80012ac <main+0x6c8>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d004      	beq.n	80010fe <main+0x51a>
 80010f4:	4a72      	ldr	r2, [pc, #456]	; (80012c0 <main+0x6dc>)
 80010f6:	8813      	ldrh	r3, [r2, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	8013      	strh	r3, [r2, #0]
			if(SetLuxMode)	count_500ms++;
 80010fe:	782b      	ldrb	r3, [r5, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <main+0x52a>
 8001104:	4a6f      	ldr	r2, [pc, #444]	; (80012c4 <main+0x6e0>)
 8001106:	8813      	ldrh	r3, [r2, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	b29b      	uxth	r3, r3
 800110c:	8013      	strh	r3, [r2, #0]
			last_time = time_ms();
 800110e:	f000 f977 	bl	8001400 <time_ms>
 8001112:	4b6d      	ldr	r3, [pc, #436]	; (80012c8 <main+0x6e4>)
 8001114:	6018      	str	r0, [r3, #0]
 8001116:	e6cb      	b.n	8000eb0 <main+0x2cc>
						HAL_LPTIM_PWM_Stop(&hlptim1);
 8001118:	4868      	ldr	r0, [pc, #416]	; (80012bc <main+0x6d8>)
 800111a:	f000 fd0f 	bl	8001b3c <HAL_LPTIM_PWM_Stop>
 800111e:	e7d5      	b.n	80010cc <main+0x4e8>
				if( (flag_power_on) && (!flag_low_batt) && ( !HAL_GPIO_ReadPin(KEY_UP_GPIO_Port, KEY_UP_Pin) && !HAL_GPIO_ReadPin(KEY_DOWN_GPIO_Port, KEY_DOWN_Pin) ) && !key_done )
 8001120:	20a0      	movs	r0, #160	; 0xa0
 8001122:	2102      	movs	r1, #2
 8001124:	05c0      	lsls	r0, r0, #23
 8001126:	f000 fbdd 	bl	80018e4 <HAL_GPIO_ReadPin>
 800112a:	2800      	cmp	r0, #0
 800112c:	d10b      	bne.n	8001146 <main+0x562>
 800112e:	20a0      	movs	r0, #160	; 0xa0
 8001130:	2120      	movs	r1, #32
 8001132:	05c0      	lsls	r0, r0, #23
 8001134:	f000 fbd6 	bl	80018e4 <HAL_GPIO_ReadPin>
 8001138:	2800      	cmp	r0, #0
 800113a:	d104      	bne.n	8001146 <main+0x562>
 800113c:	4b63      	ldr	r3, [pc, #396]	; (80012cc <main+0x6e8>)
					key_adc_pressed++;
 800113e:	4a64      	ldr	r2, [pc, #400]	; (80012d0 <main+0x6ec>)
				if( (flag_power_on) && (!flag_low_batt) && ( !HAL_GPIO_ReadPin(KEY_UP_GPIO_Port, KEY_UP_Pin) && !HAL_GPIO_ReadPin(KEY_DOWN_GPIO_Port, KEY_DOWN_Pin) ) && !key_done )
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d03d      	beq.n	80011c2 <main+0x5de>
				else if( (flag_power_on) && (!flag_low_batt) && !( HAL_GPIO_ReadPin(KEY_UP_GPIO_Port, KEY_UP_Pin) && HAL_GPIO_ReadPin(KEY_DOWN_GPIO_Port, KEY_DOWN_Pin) && HAL_GPIO_ReadPin(KEY_ON_GPIO_Port, KEY_ON_Pin) ) && !key_done )
 8001146:	4b63      	ldr	r3, [pc, #396]	; (80012d4 <main+0x6f0>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <main+0x572>
 800114e:	4b57      	ldr	r3, [pc, #348]	; (80012ac <main+0x6c8>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d029      	beq.n	80011aa <main+0x5c6>
				else if((key_adc_pressed > 10) && (key_adc_pressed < 100))
 8001156:	4b5e      	ldr	r3, [pc, #376]	; (80012d0 <main+0x6ec>)
 8001158:	881a      	ldrh	r2, [r3, #0]
 800115a:	2a0a      	cmp	r2, #10
 800115c:	d800      	bhi.n	8001160 <main+0x57c>
 800115e:	e08b      	b.n	8001278 <main+0x694>
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	2b63      	cmp	r3, #99	; 0x63
 8001164:	d900      	bls.n	8001168 <main+0x584>
 8001166:	e087      	b.n	8001278 <main+0x694>
					if(flag_change_mode)
 8001168:	4b5b      	ldr	r3, [pc, #364]	; (80012d8 <main+0x6f4>)
 800116a:	7819      	ldrb	r1, [r3, #0]
 800116c:	2900      	cmp	r1, #0
 800116e:	d009      	beq.n	8001184 <main+0x5a0>
						flag_led_mode++;
 8001170:	4a4f      	ldr	r2, [pc, #316]	; (80012b0 <main+0x6cc>)
 8001172:	7813      	ldrb	r3, [r2, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	7013      	strb	r3, [r2, #0]
						if(flag_led_mode > 3) flag_led_mode = 1;
 800117a:	7813      	ldrb	r3, [r2, #0]
 800117c:	2b03      	cmp	r3, #3
 800117e:	d901      	bls.n	8001184 <main+0x5a0>
 8001180:	2301      	movs	r3, #1
 8001182:	7013      	strb	r3, [r2, #0]
					if( (flag_power_on) && (!flag_stop_mode) && (!flag_change_mode) )
 8001184:	4b53      	ldr	r3, [pc, #332]	; (80012d4 <main+0x6f0>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d064      	beq.n	8001256 <main+0x672>
 800118c:	4b53      	ldr	r3, [pc, #332]	; (80012dc <main+0x6f8>)
 800118e:	781a      	ldrb	r2, [r3, #0]
 8001190:	2a00      	cmp	r2, #0
 8001192:	d160      	bne.n	8001256 <main+0x672>
 8001194:	2900      	cmp	r1, #0
 8001196:	d000      	beq.n	800119a <main+0x5b6>
 8001198:	e75c      	b.n	8001054 <main+0x470>
						key_pos = Default_LED;
 800119a:	4a46      	ldr	r2, [pc, #280]	; (80012b4 <main+0x6d0>)
 800119c:	3108      	adds	r1, #8
 800119e:	7011      	strb	r1, [r2, #0]
						flag_change_mode = 1;
 80011a0:	2201      	movs	r2, #1
 80011a2:	494d      	ldr	r1, [pc, #308]	; (80012d8 <main+0x6f4>)
						flag_stop_mode = 1;
 80011a4:	701a      	strb	r2, [r3, #0]
						flag_change_mode = 1;
 80011a6:	700a      	strb	r2, [r1, #0]
						flag_stop_mode = 1;
 80011a8:	e754      	b.n	8001054 <main+0x470>
				else if( (flag_power_on) && (!flag_low_batt) && !( HAL_GPIO_ReadPin(KEY_UP_GPIO_Port, KEY_UP_Pin) && HAL_GPIO_ReadPin(KEY_DOWN_GPIO_Port, KEY_DOWN_Pin) && HAL_GPIO_ReadPin(KEY_ON_GPIO_Port, KEY_ON_Pin) ) && !key_done )
 80011aa:	20a0      	movs	r0, #160	; 0xa0
 80011ac:	2102      	movs	r1, #2
 80011ae:	05c0      	lsls	r0, r0, #23
 80011b0:	f000 fb98 	bl	80018e4 <HAL_GPIO_ReadPin>
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d13f      	bne.n	8001238 <main+0x654>
 80011b8:	4b44      	ldr	r3, [pc, #272]	; (80012cc <main+0x6e8>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1ca      	bne.n	8001156 <main+0x572>
					key_pressed++;
 80011c0:	4a47      	ldr	r2, [pc, #284]	; (80012e0 <main+0x6fc>)
 80011c2:	8813      	ldrh	r3, [r2, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	8013      	strh	r3, [r2, #0]
				if( key_adc_pressed < 0 ) key_adc_pressed = 0;
 80011ca:	4b41      	ldr	r3, [pc, #260]	; (80012d0 <main+0x6ec>)
 80011cc:	881a      	ldrh	r2, [r3, #0]
				else if( key_adc_pressed > (KEY_ADC_DELAY-1) )
 80011ce:	881a      	ldrh	r2, [r3, #0]
 80011d0:	2ac7      	cmp	r2, #199	; 0xc7
 80011d2:	d916      	bls.n	8001202 <main+0x61e>
					key_done = 1;
 80011d4:	2601      	movs	r6, #1
 80011d6:	4a3d      	ldr	r2, [pc, #244]	; (80012cc <main+0x6e8>)
 80011d8:	7016      	strb	r6, [r2, #0]
					key_adc_pressed = 0;
 80011da:	2200      	movs	r2, #0
 80011dc:	801a      	strh	r2, [r3, #0]
					SetLuxMode ^= 0x1;
 80011de:	782a      	ldrb	r2, [r5, #0]
 80011e0:	4072      	eors	r2, r6
 80011e2:	702a      	strb	r2, [r5, #0]
					if(SetLuxMode)
 80011e4:	d055      	beq.n	8001292 <main+0x6ae>
						HAL_GPIO_WritePin(CDS_En_GPIO_Port, CDS_En_Pin, SET);
 80011e6:	20a0      	movs	r0, #160	; 0xa0
 80011e8:	0032      	movs	r2, r6
 80011ea:	0031      	movs	r1, r6
 80011ec:	05c0      	lsls	r0, r0, #23
 80011ee:	f000 fb7f 	bl	80018f0 <HAL_GPIO_WritePin>
						temp_key_pos = key_pos;
 80011f2:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <main+0x6d0>)
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <main+0x700>)
 80011f8:	701a      	strb	r2, [r3, #0]
					last_time = time_ms();
 80011fa:	f000 f901 	bl	8001400 <time_ms>
 80011fe:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <main+0x6e4>)
 8001200:	6018      	str	r0, [r3, #0]
				if( key_pressed < 0 ) key_pressed = 0;
 8001202:	4e37      	ldr	r6, [pc, #220]	; (80012e0 <main+0x6fc>)
 8001204:	8833      	ldrh	r3, [r6, #0]
				else if( key_pressed > (KEY_FUNC_DELAY-1) )
 8001206:	8833      	ldrh	r3, [r6, #0]
 8001208:	2bc7      	cmp	r3, #199	; 0xc7
 800120a:	d800      	bhi.n	800120e <main+0x62a>
 800120c:	e76e      	b.n	80010ec <main+0x508>
					key_done = 1;
 800120e:	2201      	movs	r2, #1
 8001210:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <main+0x6e8>)
					HAL_LPTIM_PWM_Stop(&hlptim1);
 8001212:	482a      	ldr	r0, [pc, #168]	; (80012bc <main+0x6d8>)
					key_done = 1;
 8001214:	701a      	strb	r2, [r3, #0]
					HAL_LPTIM_PWM_Stop(&hlptim1);
 8001216:	f000 fc91 	bl	8001b3c <HAL_LPTIM_PWM_Stop>
					flag_change_mode = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	4a2e      	ldr	r2, [pc, #184]	; (80012d8 <main+0x6f4>)
					key_pressed = 0;
 800121e:	8033      	strh	r3, [r6, #0]
					flag_change_mode = 0;
 8001220:	7013      	strb	r3, [r2, #0]
					flag_power_on = 0;
 8001222:	4a2c      	ldr	r2, [pc, #176]	; (80012d4 <main+0x6f0>)
 8001224:	7013      	strb	r3, [r2, #0]
					key_pos = 0;
 8001226:	4a23      	ldr	r2, [pc, #140]	; (80012b4 <main+0x6d0>)
 8001228:	7013      	strb	r3, [r2, #0]
					last_time = time_ms();
 800122a:	f000 f8e9 	bl	8001400 <time_ms>
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <main+0x6e4>)
 8001230:	6018      	str	r0, [r3, #0]
					StopMode();
 8001232:	f7ff fcc3 	bl	8000bbc <StopMode>
 8001236:	e759      	b.n	80010ec <main+0x508>
				else if( (flag_power_on) && (!flag_low_batt) && !( HAL_GPIO_ReadPin(KEY_UP_GPIO_Port, KEY_UP_Pin) && HAL_GPIO_ReadPin(KEY_DOWN_GPIO_Port, KEY_DOWN_Pin) && HAL_GPIO_ReadPin(KEY_ON_GPIO_Port, KEY_ON_Pin) ) && !key_done )
 8001238:	20a0      	movs	r0, #160	; 0xa0
 800123a:	2120      	movs	r1, #32
 800123c:	05c0      	lsls	r0, r0, #23
 800123e:	f000 fb51 	bl	80018e4 <HAL_GPIO_ReadPin>
 8001242:	2800      	cmp	r0, #0
 8001244:	d0b8      	beq.n	80011b8 <main+0x5d4>
 8001246:	20a0      	movs	r0, #160	; 0xa0
 8001248:	2110      	movs	r1, #16
 800124a:	05c0      	lsls	r0, r0, #23
 800124c:	f000 fb4a 	bl	80018e4 <HAL_GPIO_ReadPin>
 8001250:	2800      	cmp	r0, #0
 8001252:	d0b1      	beq.n	80011b8 <main+0x5d4>
 8001254:	e77f      	b.n	8001156 <main+0x572>
					if(flag_change_mode)
 8001256:	2900      	cmp	r1, #0
 8001258:	d000      	beq.n	800125c <main+0x678>
 800125a:	e6fb      	b.n	8001054 <main+0x470>
					key_adc_pressed =0;
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <main+0x6ec>)
					key_pressed = 0;
 800125e:	2200      	movs	r2, #0
 8001260:	801a      	strh	r2, [r3, #0]
 8001262:	e7b2      	b.n	80011ca <main+0x5e6>
							HAL_GPIO_WritePin(CH_SEL1_GPIO_Port, CH_SEL1_Pin, RESET);
 8001264:	2200      	movs	r2, #0
							HAL_GPIO_WritePin(CH_SEL1_GPIO_Port, CH_SEL1_Pin, SET);
 8001266:	20a0      	movs	r0, #160	; 0xa0
 8001268:	0021      	movs	r1, r4
 800126a:	05c0      	lsls	r0, r0, #23
 800126c:	f000 fb40 	bl	80018f0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(CH_SEL2_GPIO_Port, CH_SEL2_Pin, SET);
 8001270:	2201      	movs	r2, #1
 8001272:	e702      	b.n	800107a <main+0x496>
							HAL_GPIO_WritePin(CH_SEL1_GPIO_Port, CH_SEL1_Pin, SET);
 8001274:	2201      	movs	r2, #1
 8001276:	e7f6      	b.n	8001266 <main+0x682>
				else if((key_pressed > 10) && (key_pressed < 100))
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <main+0x6fc>)
 800127a:	881a      	ldrh	r2, [r3, #0]
 800127c:	2a0a      	cmp	r2, #10
 800127e:	d9a4      	bls.n	80011ca <main+0x5e6>
 8001280:	881a      	ldrh	r2, [r3, #0]
 8001282:	2a63      	cmp	r2, #99	; 0x63
 8001284:	d8a1      	bhi.n	80011ca <main+0x5e6>
					if(SetLuxMode)	flag_stop_mode = 0;
 8001286:	2201      	movs	r2, #1
 8001288:	7829      	ldrb	r1, [r5, #0]
 800128a:	404a      	eors	r2, r1
 800128c:	4913      	ldr	r1, [pc, #76]	; (80012dc <main+0x6f8>)
 800128e:	700a      	strb	r2, [r1, #0]
 8001290:	e7e5      	b.n	800125e <main+0x67a>
						HAL_GPIO_WritePin(CDS_En_GPIO_Port, CDS_En_Pin, RESET);
 8001292:	20a0      	movs	r0, #160	; 0xa0
 8001294:	0031      	movs	r1, r6
 8001296:	05c0      	lsls	r0, r0, #23
 8001298:	f000 fb2a 	bl	80018f0 <HAL_GPIO_WritePin>
						key_pos = temp_key_pos;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <main+0x700>)
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <main+0x6d0>)
 80012a2:	701a      	strb	r2, [r3, #0]
						flag_stop_mode = 1;
 80012a4:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <main+0x6f8>)
 80012a6:	701e      	strb	r6, [r3, #0]
 80012a8:	e7a7      	b.n	80011fa <main+0x616>
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	200000bb 	.word	0x200000bb
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000004 	.word	0x20000004
 80012b8:	2000004a 	.word	0x2000004a
 80012bc:	200000bc 	.word	0x200000bc
 80012c0:	200000b4 	.word	0x200000b4
 80012c4:	200000b6 	.word	0x200000b6
 80012c8:	200000f0 	.word	0x200000f0
 80012cc:	20000003 	.word	0x20000003
 80012d0:	200000ec 	.word	0x200000ec
 80012d4:	20000001 	.word	0x20000001
 80012d8:	200000b9 	.word	0x200000b9
 80012dc:	20000002 	.word	0x20000002
 80012e0:	200000ee 	.word	0x200000ee
 80012e4:	200000f4 	.word	0x200000f4

080012e8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e8:	2201      	movs	r2, #1
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_MspInit+0x18>)
 80012ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ee:	430a      	orrs	r2, r1
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80012f6:	0552      	lsls	r2, r2, #21
 80012f8:	430a      	orrs	r2, r1
 80012fa:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fc:	4770      	bx	lr
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	40021000 	.word	0x40021000

08001304 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001304:	b510      	push	{r4, lr}
 8001306:	0004      	movs	r4, r0
 8001308:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130a:	2214      	movs	r2, #20
 800130c:	2100      	movs	r1, #0
 800130e:	a801      	add	r0, sp, #4
 8001310:	f000 fdff 	bl	8001f12 <memset>
  if(hlptim->Instance==LPTIM1)
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_LPTIM_MspInit+0x4c>)
 8001316:	6822      	ldr	r2, [r4, #0]
 8001318:	429a      	cmp	r2, r3
 800131a:	d117      	bne.n	800134c <HAL_LPTIM_MspInit+0x48>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800131c:	2280      	movs	r2, #128	; 0x80
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_LPTIM_MspInit+0x50>)
 8001320:	0612      	lsls	r2, r2, #24
 8001322:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = LED_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8001324:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001326:	430a      	orrs	r2, r1
 8001328:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2201      	movs	r2, #1
 800132c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 800132e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4311      	orrs	r1, r2
 8001332:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8001336:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	4013      	ands	r3, r2
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	3b7e      	subs	r3, #126	; 0x7e
 8001344:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001346:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8001348:	f000 fa20 	bl	800178c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800134c:	b006      	add	sp, #24
 800134e:	bd10      	pop	{r4, pc}
 8001350:	40007c00 	.word	0x40007c00
 8001354:	40021000 	.word	0x40021000

08001358 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <NMI_Handler>

0800135a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <HardFault_Handler>

0800135c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800135c:	4770      	bx	lr

0800135e <PendSV_Handler>:
 800135e:	4770      	bx	lr

08001360 <SysTick_Handler>:
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout > 0)  timeout--;
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <SysTick_Handler+0x1c>)
{
 8001362:	b510      	push	{r4, lr}
	if(timeout > 0)  timeout--;
 8001364:	8813      	ldrh	r3, [r2, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <SysTick_Handler+0x12>
 800136a:	8813      	ldrh	r3, [r2, #0]
 800136c:	3b01      	subs	r3, #1
 800136e:	b29b      	uxth	r3, r3
 8001370:	8013      	strh	r3, [r2, #0]
	time_SysTick_Handler();
 8001372:	f000 f81b 	bl	80013ac <time_SysTick_Handler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001376:	f000 f985 	bl	8001684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137a:	bd10      	pop	{r4, pc}
 800137c:	200000f6 	.word	0x200000f6

08001380 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001380:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_UP_Pin);
 8001382:	2002      	movs	r0, #2
 8001384:	f000 faba 	bl	80018fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001388:	bd10      	pop	{r4, pc}

0800138a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800138a:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_ON_Pin);
 800138c:	2010      	movs	r0, #16
 800138e:	f000 fab5 	bl	80018fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY_DOWN_Pin);
 8001392:	2020      	movs	r0, #32
 8001394:	f000 fab2 	bl	80018fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BATT_DET_Pin);
 8001398:	2040      	movs	r0, #64	; 0x40
 800139a:	f000 faaf 	bl	80018fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800139e:	bd10      	pop	{r4, pc}

080013a0 <ADC1_COMP_IRQHandler>:
 80013a0:	4770      	bx	lr

080013a2 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 80013a2:	b510      	push	{r4, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */
	LPUART1_ISR();
 80013a4:	f000 f868 	bl	8001478 <LPUART1_ISR>
  /* USER CODE END LPUART1_IRQn 0 */
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80013a8:	bd10      	pop	{r4, pc}

080013aa <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013aa:	4770      	bx	lr

080013ac <time_SysTick_Handler>:

__IO uint32_t counter_ms = 0;

/* add the function to the void SysTick_Handler(void) in stm32fxxx_it.c file */
void time_SysTick_Handler() {
  counter_ms++;
 80013ac:	4a02      	ldr	r2, [pc, #8]	; (80013b8 <time_SysTick_Handler+0xc>)
 80013ae:	6813      	ldr	r3, [r2, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	6013      	str	r3, [r2, #0]
}
 80013b4:	4770      	bx	lr
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	200000f8 	.word	0x200000f8

080013bc <time_setup>:
   *      Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
   *
   *      - Reload Value is the parameter to be passed for SysTick_Config() function
   *      - Reload Value should not exceed 0xFFFFFF
   */
  if (SysTick_Config(SystemCoreClock / 1000 -1)) {
 80013bc:	21fa      	movs	r1, #250	; 0xfa
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <time_setup+0x38>)
void time_setup() {
 80013c0:	b510      	push	{r4, lr}
  if (SysTick_Config(SystemCoreClock / 1000 -1)) {
 80013c2:	6818      	ldr	r0, [r3, #0]
 80013c4:	0089      	lsls	r1, r1, #2
 80013c6:	f7fe feb1 	bl	800012c <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	3802      	subs	r0, #2
 80013ce:	045b      	lsls	r3, r3, #17
 80013d0:	4298      	cmp	r0, r3
 80013d2:	d20e      	bcs.n	80013f2 <time_setup+0x36>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d4:	21c0      	movs	r1, #192	; 0xc0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d6:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <time_setup+0x3c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d8:	0609      	lsls	r1, r1, #24
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013da:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013dc:	4807      	ldr	r0, [pc, #28]	; (80013fc <time_setup+0x40>)
 80013de:	6a03      	ldr	r3, [r0, #32]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	0a1b      	lsrs	r3, r3, #8
 80013e4:	430b      	orrs	r3, r1
 80013e6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	2300      	movs	r3, #0
 80013ea:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ec:	3307      	adds	r3, #7
 80013ee:	6013      	str	r3, [r2, #0]
    /* Capture error */
    while (1);
  }
}
 80013f0:	bd10      	pop	{r4, pc}
    while (1);
 80013f2:	e7fe      	b.n	80013f2 <time_setup+0x36>
 80013f4:	20000008 	.word	0x20000008
 80013f8:	e000e010 	.word	0xe000e010
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <time_ms>:

volatile uint32_t time_ms() {
  return counter_ms;
 8001400:	4b01      	ldr	r3, [pc, #4]	; (8001408 <time_ms+0x8>)
 8001402:	6818      	ldr	r0, [r3, #0]
}
 8001404:	4770      	bx	lr
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	200000f8 	.word	0x200000f8

0800140c <PrintUART>:
//	NVIC_EnableIRQ(LPUART1_IRQn);
//}

void PrintUART(const char *buffer)
{
	while(TxOn);
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <PrintUART+0x3c>)
 800140e:	781a      	ldrb	r2, [r3, #0]
 8001410:	2a00      	cmp	r2, #0
 8001412:	d1fc      	bne.n	800140e <PrintUART+0x2>
	TxBytes = 0;
	TxBuffer = (uint8_t *)buffer;
 8001414:	4a0d      	ldr	r2, [pc, #52]	; (800144c <PrintUART+0x40>)
 8001416:	6010      	str	r0, [r2, #0]
	TxOn = 1;
 8001418:	2201      	movs	r2, #1
 800141a:	701a      	strb	r2, [r3, #0]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <PrintUART+0x44>)
 800141e:	327f      	adds	r2, #127	; 0x7f
 8001420:	69d9      	ldr	r1, [r3, #28]
 8001422:	4211      	tst	r1, r2
 8001424:	d0fc      	beq.n	8001420 <PrintUART+0x14>

	while (!LL_LPUART_IsActiveFlag_TXE(LPUART1));
	LL_LPUART_TransmitData8(LPUART1, TxBuffer[TxBytes++]);
 8001426:	2201      	movs	r2, #1
 8001428:	490a      	ldr	r1, [pc, #40]	; (8001454 <PrintUART+0x48>)
 800142a:	700a      	strb	r2, [r1, #0]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
  LPUARTx->TDR = Value;
 800142c:	7801      	ldrb	r1, [r0, #0]
 800142e:	6299      	str	r1, [r3, #40]	; 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001430:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001434:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	323f      	adds	r2, #63	; 0x3f
 800143c:	4302      	orrs	r2, r0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	f381 8810 	msr	PRIMASK, r1
	LL_LPUART_EnableIT_TC(LPUART1);
}
 8001444:	4770      	bx	lr
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	20000145 	.word	0x20000145
 800144c:	20000140 	.word	0x20000140
 8001450:	40004800 	.word	0x40004800
 8001454:	20000144 	.word	0x20000144

08001458 <isReadyByte>:

uint8_t isReadyByte()
{
	return(ReadyRead);
 8001458:	4b01      	ldr	r3, [pc, #4]	; (8001460 <isReadyByte+0x8>)
 800145a:	7818      	ldrb	r0, [r3, #0]
 800145c:	b2c0      	uxtb	r0, r0
}
 800145e:	4770      	bx	lr
 8001460:	200000fc 	.word	0x200000fc

08001464 <GetUART>:
	return(RxReadBytes);
}

uint8_t *GetUART()
{
	ReadyRead = 0;
 8001464:	2200      	movs	r2, #0
 8001466:	4b02      	ldr	r3, [pc, #8]	; (8001470 <GetUART+0xc>)
	return(RxBuffer);
}
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <GetUART+0x10>)
	ReadyRead = 0;
 800146a:	701a      	strb	r2, [r3, #0]
}
 800146c:	4770      	bx	lr
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	200000fc 	.word	0x200000fc
 8001474:	200000fd 	.word	0x200000fd

08001478 <LPUART1_ISR>:
  * Brief   This function handles LPUART1 interrupt request.
  * Param   None
  * Retval  None
  */
void LPUART1_ISR(void)
{
 8001478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t d = 0;

	if((LPUART1->ISR & USART_ISR_TC) == USART_ISR_TC)
 800147a:	2740      	movs	r7, #64	; 0x40
 800147c:	4c3a      	ldr	r4, [pc, #232]	; (8001568 <LPUART1_ISR+0xf0>)
 800147e:	69e3      	ldr	r3, [r4, #28]
 8001480:	423b      	tst	r3, r7
 8001482:	d031      	beq.n	80014e8 <LPUART1_ISR+0x70>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001484:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001488:	2301      	movs	r3, #1
 800148a:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(LPUARTx->CR1, USART_CR1_RXNEIE);
 800148e:	2120      	movs	r1, #32
 8001490:	6823      	ldr	r3, [r4, #0]
 8001492:	438b      	bics	r3, r1
 8001494:	6023      	str	r3, [r4, #0]
 8001496:	f382 8810 	msr	PRIMASK, r2
	{
//		NVIC_DisableIRQ(LPUART1_IRQn);/* Disable USART1_IRQn */
		LL_LPUART_DisableIT_RXNE(LPUART1);

		if(TxBytes == strlen((char *)TxBuffer)) {
 800149a:	4b34      	ldr	r3, [pc, #208]	; (800156c <LPUART1_ISR+0xf4>)
 800149c:	781d      	ldrb	r5, [r3, #0]
 800149e:	4b34      	ldr	r3, [pc, #208]	; (8001570 <LPUART1_ISR+0xf8>)
 80014a0:	681e      	ldr	r6, [r3, #0]
 80014a2:	0030      	movs	r0, r6
 80014a4:	f7fe fe3a 	bl	800011c <strlen>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	4285      	cmp	r5, r0
 80014ac:	d10f      	bne.n	80014ce <LPUART1_ISR+0x56>
			LPUART1->ICR = USART_ICR_TCCF;/* clear transfer complete flag */
			TxOn = 0;
 80014ae:	2200      	movs	r2, #0
 80014b0:	4b30      	ldr	r3, [pc, #192]	; (8001574 <LPUART1_ISR+0xfc>)
			LPUART1->ICR = USART_ICR_TCCF;/* clear transfer complete flag */
 80014b2:	6227      	str	r7, [r4, #32]
			TxOn = 0;
 80014b4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014b6:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014ba:	2301      	movs	r3, #1
 80014bc:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE);
 80014c0:	6821      	ldr	r1, [r4, #0]
 80014c2:	331f      	adds	r3, #31
 80014c4:	430b      	orrs	r3, r1
 80014c6:	6023      	str	r3, [r4, #0]
 80014c8:	f382 8810 	msr	PRIMASK, r2
	}
	else {
//		error = ERROR_USART; /* Report an error */
		NVIC_DisableIRQ(LPUART1_IRQn);/* Disable USART1_IRQn */
	}
}
 80014cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80014ce:	69e2      	ldr	r2, [r4, #28]
 80014d0:	421a      	tst	r2, r3
 80014d2:	d0fc      	beq.n	80014ce <LPUART1_ISR+0x56>
			LL_LPUART_TransmitData8(LPUART1, TxBuffer[TxBytes++]);
 80014d4:	4a25      	ldr	r2, [pc, #148]	; (800156c <LPUART1_ISR+0xf4>)
 80014d6:	1c6b      	adds	r3, r5, #1
 80014d8:	7013      	strb	r3, [r2, #0]
  LPUARTx->TDR = Value;
 80014da:	5d73      	ldrb	r3, [r6, r5]
 80014dc:	62a3      	str	r3, [r4, #40]	; 0x28
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80014de:	2340      	movs	r3, #64	; 0x40
 80014e0:	69e2      	ldr	r2, [r4, #28]
 80014e2:	421a      	tst	r2, r3
 80014e4:	d0fc      	beq.n	80014e0 <LPUART1_ISR+0x68>
 80014e6:	e7e6      	b.n	80014b6 <LPUART1_ISR+0x3e>
	else if((LPUART1->ISR & USART_ISR_RXNE) == USART_ISR_RXNE) {
 80014e8:	69e3      	ldr	r3, [r4, #28]
 80014ea:	069b      	lsls	r3, r3, #26
 80014ec:	d532      	bpl.n	8001554 <LPUART1_ISR+0xdc>
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 80014ee:	2308      	movs	r3, #8
		d = LPUART1->RDR;/* receive data, clear flag */
 80014f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014f2:	6223      	str	r3, [r4, #32]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_BUSY) == (USART_ISR_BUSY)) ? 1UL : 0UL);
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	025b      	lsls	r3, r3, #9
 80014fa:	69e1      	ldr	r1, [r4, #28]
 80014fc:	4219      	tst	r1, r3
 80014fe:	d1fc      	bne.n	80014fa <LPUART1_ISR+0x82>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	03db      	lsls	r3, r3, #15
 8001504:	69e1      	ldr	r1, [r4, #28]
 8001506:	4219      	tst	r1, r3
 8001508:	d0fc      	beq.n	8001504 <LPUART1_ISR+0x8c>
		if(RxBytes >= MAX_READ) RxBytes = 0;
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <LPUART1_ISR+0x100>)
 800150c:	7819      	ldrb	r1, [r3, #0]
 800150e:	293f      	cmp	r1, #63	; 0x3f
 8001510:	d901      	bls.n	8001516 <LPUART1_ISR+0x9e>
 8001512:	2100      	movs	r1, #0
 8001514:	7019      	strb	r1, [r3, #0]
		if(RxCRLF == 0 && d == UART_CR) {
 8001516:	4819      	ldr	r0, [pc, #100]	; (800157c <LPUART1_ISR+0x104>)
 8001518:	7804      	ldrb	r4, [r0, #0]
 800151a:	2c00      	cmp	r4, #0
 800151c:	d104      	bne.n	8001528 <LPUART1_ISR+0xb0>
 800151e:	2a0d      	cmp	r2, #13
 8001520:	d112      	bne.n	8001548 <LPUART1_ISR+0xd0>
			RxCRLF = ENTER_CR;
 8001522:	2301      	movs	r3, #1
 8001524:	7003      	strb	r3, [r0, #0]
 8001526:	e7d1      	b.n	80014cc <LPUART1_ISR+0x54>
		else if(RxCRLF == ENTER_CR && d == UART_LF) {
 8001528:	2c01      	cmp	r4, #1
 800152a:	d10d      	bne.n	8001548 <LPUART1_ISR+0xd0>
 800152c:	2a0a      	cmp	r2, #10
 800152e:	d10b      	bne.n	8001548 <LPUART1_ISR+0xd0>
			RxBuffer[RxBytes++] = 0;
 8001530:	2100      	movs	r1, #0
 8001532:	781a      	ldrb	r2, [r3, #0]
 8001534:	4d12      	ldr	r5, [pc, #72]	; (8001580 <LPUART1_ISR+0x108>)
			RxCRLF = 0;
 8001536:	7001      	strb	r1, [r0, #0]
			RxBuffer[RxBytes++] = 0;
 8001538:	54a9      	strb	r1, [r5, r2]
			RxReadBytes = RxBytes;
 800153a:	4d12      	ldr	r5, [pc, #72]	; (8001584 <LPUART1_ISR+0x10c>)
			RxBuffer[RxBytes++] = 0;
 800153c:	3201      	adds	r2, #1
			RxReadBytes = RxBytes;
 800153e:	702a      	strb	r2, [r5, #0]
			ReadyRead = 1;
 8001540:	4a11      	ldr	r2, [pc, #68]	; (8001588 <LPUART1_ISR+0x110>)
			RxBytes = 0;
 8001542:	7019      	strb	r1, [r3, #0]
			ReadyRead = 1;
 8001544:	7014      	strb	r4, [r2, #0]
			RxBytes = 0;
 8001546:	e7c1      	b.n	80014cc <LPUART1_ISR+0x54>
		else RxBuffer[RxBytes++] = d;
 8001548:	7819      	ldrb	r1, [r3, #0]
 800154a:	1c48      	adds	r0, r1, #1
 800154c:	7018      	strb	r0, [r3, #0]
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <LPUART1_ISR+0x108>)
 8001550:	545a      	strb	r2, [r3, r1]
 8001552:	e7bb      	b.n	80014cc <LPUART1_ISR+0x54>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <LPUART1_ISR+0x114>)
 8001558:	0592      	lsls	r2, r2, #22
 800155a:	67da      	str	r2, [r3, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800155c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001560:	f3bf 8f6f 	isb	sy
}
 8001564:	e7b2      	b.n	80014cc <LPUART1_ISR+0x54>
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	40004800 	.word	0x40004800
 800156c:	20000144 	.word	0x20000144
 8001570:	20000140 	.word	0x20000140
 8001574:	20000145 	.word	0x20000145
 8001578:	2000013d 	.word	0x2000013d
 800157c:	2000013e 	.word	0x2000013e
 8001580:	200000fd 	.word	0x200000fd
 8001584:	2000013f 	.word	0x2000013f
 8001588:	200000fc 	.word	0x200000fc
 800158c:	e000e104 	.word	0xe000e104

08001590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001590:	4813      	ldr	r0, [pc, #76]	; (80015e0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001592:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001594:	4813      	ldr	r0, [pc, #76]	; (80015e4 <LoopForever+0x6>)
    LDR R1, [R0]
 8001596:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001598:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800159a:	4a13      	ldr	r2, [pc, #76]	; (80015e8 <LoopForever+0xa>)
    CMP R1, R2
 800159c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800159e:	d105      	bne.n	80015ac <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80015a0:	4812      	ldr	r0, [pc, #72]	; (80015ec <LoopForever+0xe>)
    LDR R1,=0x00000001
 80015a2:	4913      	ldr	r1, [pc, #76]	; (80015f0 <LoopForever+0x12>)
    STR R1, [R0]
 80015a4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80015a6:	4813      	ldr	r0, [pc, #76]	; (80015f4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80015a8:	4913      	ldr	r1, [pc, #76]	; (80015f8 <LoopForever+0x1a>)
    STR R1, [R0]
 80015aa:	6001      	str	r1, [r0, #0]

080015ac <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ac:	4813      	ldr	r0, [pc, #76]	; (80015fc <LoopForever+0x1e>)
  ldr r1, =_edata
 80015ae:	4914      	ldr	r1, [pc, #80]	; (8001600 <LoopForever+0x22>)
  ldr r2, =_sidata
 80015b0:	4a14      	ldr	r2, [pc, #80]	; (8001604 <LoopForever+0x26>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b4:	e002      	b.n	80015bc <LoopCopyDataInit>

080015b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ba:	3304      	adds	r3, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c0:	d3f9      	bcc.n	80015b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c2:	4a11      	ldr	r2, [pc, #68]	; (8001608 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80015c4:	4c11      	ldr	r4, [pc, #68]	; (800160c <LoopForever+0x2e>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c8:	e001      	b.n	80015ce <LoopFillZerobss>

080015ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015cc:	3204      	adds	r2, #4

080015ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d0:	d3fb      	bcc.n	80015ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80015d2:	f7ff feea 	bl	80013aa <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015d6:	f000 fc6f 	bl	8001eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015da:	f7ff fb03 	bl	8000be4 <main>

080015de <LoopForever>:

LoopForever:
    b LoopForever
 80015de:	e7fe      	b.n	80015de <LoopForever>
   ldr   r0, =_estack
 80015e0:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 80015e4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80015e8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80015ec:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80015f0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80015f4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80015f8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80015fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001600:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001604:	08001fd0 	.word	0x08001fd0
  ldr r2, =_sbss
 8001608:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800160c:	2000014c 	.word	0x2000014c

08001610 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <DMA1_Channel1_IRQHandler>
	...

08001614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001614:	b570      	push	{r4, r5, r6, lr}
 8001616:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001618:	20fa      	movs	r0, #250	; 0xfa
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <HAL_InitTick+0x3c>)
 800161c:	0080      	lsls	r0, r0, #2
 800161e:	7819      	ldrb	r1, [r3, #0]
 8001620:	f7fe fd84 	bl	800012c <__udivsi3>
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_InitTick+0x40>)
 8001626:	0001      	movs	r1, r0
 8001628:	6818      	ldr	r0, [r3, #0]
 800162a:	f7fe fd7f 	bl	800012c <__udivsi3>
 800162e:	f000 f893 	bl	8001758 <HAL_SYSTICK_Config>
 8001632:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001634:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001636:	2c00      	cmp	r4, #0
 8001638:	d109      	bne.n	800164e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163a:	2d03      	cmp	r5, #3
 800163c:	d807      	bhi.n	800164e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163e:	3802      	subs	r0, #2
 8001640:	0022      	movs	r2, r4
 8001642:	0029      	movs	r1, r5
 8001644:	f000 f852 	bl	80016ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001648:	0020      	movs	r0, r4
 800164a:	4b03      	ldr	r3, [pc, #12]	; (8001658 <HAL_InitTick+0x44>)
 800164c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800164e:	bd70      	pop	{r4, r5, r6, pc}
 8001650:	2000000c 	.word	0x2000000c
 8001654:	20000008 	.word	0x20000008
 8001658:	20000010 	.word	0x20000010

0800165c <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800165c:	2340      	movs	r3, #64	; 0x40
 800165e:	4a08      	ldr	r2, [pc, #32]	; (8001680 <HAL_Init+0x24>)
{
 8001660:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001662:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001664:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001666:	430b      	orrs	r3, r1
 8001668:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800166a:	f7ff ffd3 	bl	8001614 <HAL_InitTick>
 800166e:	1e04      	subs	r4, r0, #0
 8001670:	d103      	bne.n	800167a <HAL_Init+0x1e>
    HAL_MspInit();
 8001672:	f7ff fe39 	bl	80012e8 <HAL_MspInit>
}
 8001676:	0020      	movs	r0, r4
 8001678:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800167a:	2401      	movs	r4, #1
 800167c:	e7fb      	b.n	8001676 <HAL_Init+0x1a>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	40022000 	.word	0x40022000

08001684 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001684:	4a03      	ldr	r2, [pc, #12]	; (8001694 <HAL_IncTick+0x10>)
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <HAL_IncTick+0x14>)
 8001688:	6811      	ldr	r1, [r2, #0]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	185b      	adds	r3, r3, r1
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	4770      	bx	lr
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	20000148 	.word	0x20000148
 8001698:	2000000c 	.word	0x2000000c

0800169c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800169c:	4b01      	ldr	r3, [pc, #4]	; (80016a4 <HAL_GetTick+0x8>)
 800169e:	6818      	ldr	r0, [r3, #0]
}
 80016a0:	4770      	bx	lr
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	20000148 	.word	0x20000148

080016a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a8:	b570      	push	{r4, r5, r6, lr}
 80016aa:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80016ac:	f7ff fff6 	bl	800169c <HAL_GetTick>
 80016b0:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b2:	1c63      	adds	r3, r4, #1
 80016b4:	d002      	beq.n	80016bc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <HAL_Delay+0x20>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016bc:	f7ff ffee 	bl	800169c <HAL_GetTick>
 80016c0:	1b40      	subs	r0, r0, r5
 80016c2:	42a0      	cmp	r0, r4
 80016c4:	d3fa      	bcc.n	80016bc <HAL_Delay+0x14>
  {
  }
}
 80016c6:	bd70      	pop	{r4, r5, r6, pc}
 80016c8:	2000000c 	.word	0x2000000c

080016cc <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80016cc:	2102      	movs	r1, #2
 80016ce:	4a02      	ldr	r2, [pc, #8]	; (80016d8 <HAL_SuspendTick+0xc>)
 80016d0:	6813      	ldr	r3, [r2, #0]
 80016d2:	438b      	bics	r3, r1
 80016d4:	6013      	str	r3, [r2, #0]
}
 80016d6:	4770      	bx	lr
 80016d8:	e000e010 	.word	0xe000e010

080016dc <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80016dc:	2302      	movs	r3, #2
 80016de:	4a02      	ldr	r2, [pc, #8]	; (80016e8 <HAL_ResumeTick+0xc>)
 80016e0:	6811      	ldr	r1, [r2, #0]
 80016e2:	430b      	orrs	r3, r1
 80016e4:	6013      	str	r3, [r2, #0]
}
 80016e6:	4770      	bx	lr
 80016e8:	e000e010 	.word	0xe000e010

080016ec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ec:	b530      	push	{r4, r5, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016ee:	25ff      	movs	r5, #255	; 0xff
 80016f0:	2403      	movs	r4, #3
 80016f2:	002a      	movs	r2, r5
 80016f4:	4004      	ands	r4, r0
 80016f6:	00e4      	lsls	r4, r4, #3
 80016f8:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016fa:	0189      	lsls	r1, r1, #6
 80016fc:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016fe:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001700:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001702:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8001704:	2800      	cmp	r0, #0
 8001706:	db0a      	blt.n	800171e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001708:	24c0      	movs	r4, #192	; 0xc0
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_NVIC_SetPriority+0x4c>)
 800170c:	0880      	lsrs	r0, r0, #2
 800170e:	0080      	lsls	r0, r0, #2
 8001710:	18c0      	adds	r0, r0, r3
 8001712:	00a4      	lsls	r4, r4, #2
 8001714:	5903      	ldr	r3, [r0, r4]
 8001716:	401a      	ands	r2, r3
 8001718:	4311      	orrs	r1, r2
 800171a:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800171c:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800171e:	200f      	movs	r0, #15
 8001720:	4003      	ands	r3, r0
 8001722:	3b08      	subs	r3, #8
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <HAL_NVIC_SetPriority+0x50>)
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	181b      	adds	r3, r3, r0
 800172c:	69d8      	ldr	r0, [r3, #28]
 800172e:	4002      	ands	r2, r0
 8001730:	4311      	orrs	r1, r2
 8001732:	61d9      	str	r1, [r3, #28]
 8001734:	e7f2      	b.n	800171c <HAL_NVIC_SetPriority+0x30>
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	e000e100 	.word	0xe000e100
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001740:	2800      	cmp	r0, #0
 8001742:	db05      	blt.n	8001750 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001744:	231f      	movs	r3, #31
 8001746:	4018      	ands	r0, r3
 8001748:	3b1e      	subs	r3, #30
 800174a:	4083      	lsls	r3, r0
 800174c:	4a01      	ldr	r2, [pc, #4]	; (8001754 <HAL_NVIC_EnableIRQ+0x14>)
 800174e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001750:	4770      	bx	lr
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	e000e100 	.word	0xe000e100

08001758 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001758:	2280      	movs	r2, #128	; 0x80
 800175a:	1e43      	subs	r3, r0, #1
 800175c:	0452      	lsls	r2, r2, #17
    return (1UL);                                                   /* Reload value impossible */
 800175e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	4293      	cmp	r3, r2
 8001762:	d20d      	bcs.n	8001780 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001764:	21c0      	movs	r1, #192	; 0xc0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001766:	4a07      	ldr	r2, [pc, #28]	; (8001784 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001768:	4807      	ldr	r0, [pc, #28]	; (8001788 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800176c:	6a03      	ldr	r3, [r0, #32]
 800176e:	0609      	lsls	r1, r1, #24
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	0a1b      	lsrs	r3, r3, #8
 8001774:	430b      	orrs	r3, r1
 8001776:	6203      	str	r3, [r0, #32]
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800177c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001780:	4770      	bx	lr
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	e000e010 	.word	0xe000e010
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <HAL_GPIO_Init>:
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 800178c:	2300      	movs	r3, #0
{
 800178e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001790:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001792:	680a      	ldr	r2, [r1, #0]
 8001794:	0014      	movs	r4, r2
 8001796:	40dc      	lsrs	r4, r3
 8001798:	d101      	bne.n	800179e <HAL_GPIO_Init+0x12>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 800179a:	b005      	add	sp, #20
 800179c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800179e:	2501      	movs	r5, #1
 80017a0:	0014      	movs	r4, r2
 80017a2:	409d      	lsls	r5, r3
 80017a4:	402c      	ands	r4, r5
 80017a6:	9401      	str	r4, [sp, #4]
    if (iocurrent)
 80017a8:	422a      	tst	r2, r5
 80017aa:	d100      	bne.n	80017ae <HAL_GPIO_Init+0x22>
 80017ac:	e08d      	b.n	80018ca <HAL_GPIO_Init+0x13e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017ae:	684a      	ldr	r2, [r1, #4]
 80017b0:	005e      	lsls	r6, r3, #1
 80017b2:	4694      	mov	ip, r2
 80017b4:	2203      	movs	r2, #3
 80017b6:	4664      	mov	r4, ip
 80017b8:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80017ba:	2403      	movs	r4, #3
 80017bc:	40b4      	lsls	r4, r6
 80017be:	43e4      	mvns	r4, r4
 80017c0:	9402      	str	r4, [sp, #8]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017c2:	1e54      	subs	r4, r2, #1
 80017c4:	2c01      	cmp	r4, #1
 80017c6:	d82a      	bhi.n	800181e <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 80017c8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80017ca:	9c02      	ldr	r4, [sp, #8]
 80017cc:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ce:	68cc      	ldr	r4, [r1, #12]
 80017d0:	40b4      	lsls	r4, r6
 80017d2:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 80017d4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80017d6:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d8:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017da:	43ac      	bics	r4, r5
 80017dc:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017de:	4664      	mov	r4, ip
 80017e0:	0924      	lsrs	r4, r4, #4
 80017e2:	403c      	ands	r4, r7
 80017e4:	409c      	lsls	r4, r3
 80017e6:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80017e8:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80017ea:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017ec:	9c02      	ldr	r4, [sp, #8]
 80017ee:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f0:	688c      	ldr	r4, [r1, #8]
 80017f2:	40b4      	lsls	r4, r6
 80017f4:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80017f6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f8:	2a02      	cmp	r2, #2
 80017fa:	d112      	bne.n	8001822 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3U];
 80017fc:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80017fe:	2507      	movs	r5, #7
 8001800:	00a4      	lsls	r4, r4, #2
 8001802:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3U];
 8001804:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001806:	9403      	str	r4, [sp, #12]
 8001808:	240f      	movs	r4, #15
 800180a:	401d      	ands	r5, r3
 800180c:	00ad      	lsls	r5, r5, #2
 800180e:	40ac      	lsls	r4, r5
 8001810:	43a7      	bics	r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001812:	690c      	ldr	r4, [r1, #16]
 8001814:	40ac      	lsls	r4, r5
 8001816:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3U] = temp;
 8001818:	9c03      	ldr	r4, [sp, #12]
 800181a:	6227      	str	r7, [r4, #32]
 800181c:	e001      	b.n	8001822 <HAL_GPIO_Init+0x96>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800181e:	2a03      	cmp	r2, #3
 8001820:	d1e3      	bne.n	80017ea <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8001822:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001824:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001826:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001828:	4025      	ands	r5, r4
 800182a:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800182c:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 800182e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001830:	24c0      	movs	r4, #192	; 0xc0
 8001832:	4662      	mov	r2, ip
 8001834:	02a4      	lsls	r4, r4, #10
 8001836:	4222      	tst	r2, r4
 8001838:	d047      	beq.n	80018ca <HAL_GPIO_Init+0x13e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	2501      	movs	r5, #1
 800183c:	4c24      	ldr	r4, [pc, #144]	; (80018d0 <HAL_GPIO_Init+0x144>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800183e:	27a0      	movs	r7, #160	; 0xa0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001840:	6b62      	ldr	r2, [r4, #52]	; 0x34
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001842:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001844:	432a      	orrs	r2, r5
 8001846:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8001848:	4a22      	ldr	r2, [pc, #136]	; (80018d4 <HAL_GPIO_Init+0x148>)
 800184a:	089c      	lsrs	r4, r3, #2
 800184c:	00a4      	lsls	r4, r4, #2
 800184e:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001850:	220f      	movs	r2, #15
 8001852:	3502      	adds	r5, #2
 8001854:	401d      	ands	r5, r3
 8001856:	00ad      	lsls	r5, r5, #2
 8001858:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 800185a:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800185c:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800185e:	2200      	movs	r2, #0
 8001860:	42b8      	cmp	r0, r7
 8001862:	d008      	beq.n	8001876 <HAL_GPIO_Init+0xea>
 8001864:	4f1c      	ldr	r7, [pc, #112]	; (80018d8 <HAL_GPIO_Init+0x14c>)
 8001866:	3201      	adds	r2, #1
 8001868:	42b8      	cmp	r0, r7
 800186a:	d004      	beq.n	8001876 <HAL_GPIO_Init+0xea>
 800186c:	4f1b      	ldr	r7, [pc, #108]	; (80018dc <HAL_GPIO_Init+0x150>)
 800186e:	3201      	adds	r2, #1
 8001870:	42b8      	cmp	r0, r7
 8001872:	d000      	beq.n	8001876 <HAL_GPIO_Init+0xea>
 8001874:	3204      	adds	r2, #4
 8001876:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001878:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800187a:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800187c:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 800187e:	4a18      	ldr	r2, [pc, #96]	; (80018e0 <HAL_GPIO_Init+0x154>)
        temp &= ~((uint32_t)iocurrent);
 8001880:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8001882:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8001884:	9d01      	ldr	r5, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 8001886:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8001888:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800188a:	03ff      	lsls	r7, r7, #15
 800188c:	d401      	bmi.n	8001892 <HAL_GPIO_Init+0x106>
        temp &= ~((uint32_t)iocurrent);
 800188e:	0035      	movs	r5, r6
 8001890:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001892:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8001894:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001896:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8001898:	9d01      	ldr	r5, [sp, #4]
 800189a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800189c:	03bf      	lsls	r7, r7, #14
 800189e:	d401      	bmi.n	80018a4 <HAL_GPIO_Init+0x118>
        temp &= ~((uint32_t)iocurrent);
 80018a0:	0035      	movs	r5, r6
 80018a2:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018a4:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80018a6:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80018a8:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80018aa:	9d01      	ldr	r5, [sp, #4]
 80018ac:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ae:	02ff      	lsls	r7, r7, #11
 80018b0:	d401      	bmi.n	80018b6 <HAL_GPIO_Init+0x12a>
        temp &= ~((uint32_t)iocurrent);
 80018b2:	0035      	movs	r5, r6
 80018b4:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b6:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80018b8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80018ba:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80018bc:	9e01      	ldr	r6, [sp, #4]
 80018be:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018c0:	02bf      	lsls	r7, r7, #10
 80018c2:	d401      	bmi.n	80018c8 <HAL_GPIO_Init+0x13c>
        temp &= ~((uint32_t)iocurrent);
 80018c4:	4025      	ands	r5, r4
 80018c6:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80018c8:	60d6      	str	r6, [r2, #12]
    position++;
 80018ca:	3301      	adds	r3, #1
 80018cc:	e761      	b.n	8001792 <HAL_GPIO_Init+0x6>
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40010000 	.word	0x40010000
 80018d8:	50000400 	.word	0x50000400
 80018dc:	50000800 	.word	0x50000800
 80018e0:	40010400 	.word	0x40010400

080018e4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018e4:	6900      	ldr	r0, [r0, #16]
 80018e6:	4008      	ands	r0, r1
 80018e8:	1e43      	subs	r3, r0, #1
 80018ea:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80018ec:	b2c0      	uxtb	r0, r0
}
 80018ee:	4770      	bx	lr

080018f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018f0:	2a00      	cmp	r2, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80018f6:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80018f8:	6281      	str	r1, [r0, #40]	; 0x28
}
 80018fa:	e7fc      	b.n	80018f6 <HAL_GPIO_WritePin+0x6>

080018fc <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80018fe:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	4210      	tst	r0, r2
 8001904:	d002      	beq.n	800190c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001906:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001908:	f7ff f8a4 	bl	8000a54 <HAL_GPIO_EXTI_Callback>
  }
}
 800190c:	bd10      	pop	{r4, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	40010400 	.word	0x40010400

08001914 <LPTIM_WaitForFlag>:
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
  HAL_StatusTypeDef result = HAL_OK;
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <LPTIM_WaitForFlag+0x34>)
{
 8001916:	b570      	push	{r4, r5, r6, lr}
 8001918:	0005      	movs	r5, r0
 800191a:	000c      	movs	r4, r1
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	490b      	ldr	r1, [pc, #44]	; (800194c <LPTIM_WaitForFlag+0x38>)
 8001920:	f7fe fc04 	bl	800012c <__udivsi3>
 8001924:	23fa      	movs	r3, #250	; 0xfa
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4343      	muls	r3, r0
    count--;
    if (count == 0UL)
    {
      result = HAL_TIMEOUT;
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800192a:	6829      	ldr	r1, [r5, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800192c:	2000      	movs	r0, #0
      result = HAL_TIMEOUT;
 800192e:	2503      	movs	r5, #3
    count--;
 8001930:	3b01      	subs	r3, #1
    if (count == 0UL)
 8001932:	2b00      	cmp	r3, #0
 8001934:	d100      	bne.n	8001938 <LPTIM_WaitForFlag+0x24>
      result = HAL_TIMEOUT;
 8001936:	0028      	movs	r0, r5
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001938:	680a      	ldr	r2, [r1, #0]
 800193a:	4022      	ands	r2, r4
 800193c:	42a2      	cmp	r2, r4
 800193e:	d001      	beq.n	8001944 <LPTIM_WaitForFlag+0x30>
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f5      	bne.n	8001930 <LPTIM_WaitForFlag+0x1c>

  return result;
}
 8001944:	bd70      	pop	{r4, r5, r6, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	20000008 	.word	0x20000008
 800194c:	00004e20 	.word	0x00004e20

08001950 <HAL_LPTIM_Init>:
{
 8001950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001952:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001954:	2001      	movs	r0, #1
  if (hlptim == NULL)
 8001956:	2c00      	cmp	r4, #0
 8001958:	d042      	beq.n	80019e0 <HAL_LPTIM_Init+0x90>
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800195a:	0025      	movs	r5, r4
 800195c:	352e      	adds	r5, #46	; 0x2e
 800195e:	782b      	ldrb	r3, [r5, #0]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d105      	bne.n	8001972 <HAL_LPTIM_Init+0x22>
    hlptim->Lock = HAL_UNLOCKED;
 8001966:	0023      	movs	r3, r4
 8001968:	332d      	adds	r3, #45	; 0x2d
    HAL_LPTIM_MspInit(hlptim);
 800196a:	0020      	movs	r0, r4
    hlptim->Lock = HAL_UNLOCKED;
 800196c:	701a      	strb	r2, [r3, #0]
    HAL_LPTIM_MspInit(hlptim);
 800196e:	f7ff fcc9 	bl	8001304 <HAL_LPTIM_MspInit>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001972:	2302      	movs	r3, #2
 8001974:	702b      	strb	r3, [r5, #0]
  tmpcfgr = hlptim->Instance->CFGR;
 8001976:	6826      	ldr	r6, [r4, #0]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001978:	6861      	ldr	r1, [r4, #4]
  tmpcfgr = hlptim->Instance->CFGR;
 800197a:	68f3      	ldr	r3, [r6, #12]
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800197c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800197e:	2901      	cmp	r1, #1
 8001980:	d003      	beq.n	800198a <HAL_LPTIM_Init+0x3a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001982:	2280      	movs	r2, #128	; 0x80
 8001984:	0412      	lsls	r2, r2, #16
 8001986:	4290      	cmp	r0, r2
 8001988:	d101      	bne.n	800198e <HAL_LPTIM_Init+0x3e>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800198a:	221e      	movs	r2, #30
 800198c:	4393      	bics	r3, r2
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800198e:	6962      	ldr	r2, [r4, #20]
 8001990:	4f17      	ldr	r7, [pc, #92]	; (80019f0 <HAL_LPTIM_Init+0xa0>)
 8001992:	42ba      	cmp	r2, r7
 8001994:	d001      	beq.n	800199a <HAL_LPTIM_Init+0x4a>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001996:	4f17      	ldr	r7, [pc, #92]	; (80019f4 <HAL_LPTIM_Init+0xa4>)
 8001998:	403b      	ands	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800199a:	4f17      	ldr	r7, [pc, #92]	; (80019f8 <HAL_LPTIM_Init+0xa8>)
 800199c:	401f      	ands	r7, r3
              hlptim->Init.UpdateMode      |
 800199e:	000b      	movs	r3, r1
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80019a0:	46bc      	mov	ip, r7
              hlptim->Init.UpdateMode      |
 80019a2:	68a7      	ldr	r7, [r4, #8]
 80019a4:	4303      	orrs	r3, r0
 80019a6:	433b      	orrs	r3, r7
 80019a8:	6a27      	ldr	r7, [r4, #32]
 80019aa:	433b      	orrs	r3, r7
 80019ac:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80019ae:	433b      	orrs	r3, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80019b0:	4667      	mov	r7, ip
 80019b2:	433b      	orrs	r3, r7
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80019b4:	2900      	cmp	r1, #0
 80019b6:	d114      	bne.n	80019e2 <HAL_LPTIM_Init+0x92>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80019b8:	69e1      	ldr	r1, [r4, #28]
 80019ba:	6927      	ldr	r7, [r4, #16]
 80019bc:	4339      	orrs	r1, r7
 80019be:	430b      	orrs	r3, r1
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	0409      	lsls	r1, r1, #16
 80019c4:	4288      	cmp	r0, r1
 80019c6:	d00e      	beq.n	80019e6 <HAL_LPTIM_Init+0x96>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80019c8:	4909      	ldr	r1, [pc, #36]	; (80019f0 <HAL_LPTIM_Init+0xa0>)
 80019ca:	428a      	cmp	r2, r1
 80019cc:	d004      	beq.n	80019d8 <HAL_LPTIM_Init+0x88>
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80019ce:	69a1      	ldr	r1, [r4, #24]
 80019d0:	430a      	orrs	r2, r1
                hlptim->Init.Trigger.ActiveEdge |
 80019d2:	69e1      	ldr	r1, [r4, #28]
 80019d4:	430a      	orrs	r2, r1
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80019d6:	4313      	orrs	r3, r2
  hlptim->Instance->CFGR = tmpcfgr;
 80019d8:	60f3      	str	r3, [r6, #12]
  hlptim->State = HAL_LPTIM_STATE_READY;
 80019da:	2301      	movs	r3, #1
  return HAL_OK;
 80019dc:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 80019de:	702b      	strb	r3, [r5, #0]
}
 80019e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80019e2:	2901      	cmp	r1, #1
 80019e4:	d1ec      	bne.n	80019c0 <HAL_LPTIM_Init+0x70>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80019e6:	68e1      	ldr	r1, [r4, #12]
 80019e8:	6920      	ldr	r0, [r4, #16]
 80019ea:	4301      	orrs	r1, r0
 80019ec:	430b      	orrs	r3, r1
 80019ee:	e7eb      	b.n	80019c8 <HAL_LPTIM_Init+0x78>
 80019f0:	0000ffff 	.word	0x0000ffff
 80019f4:	ffff1f3f 	.word	0xffff1f3f
 80019f8:	ff19f1fe 	.word	0xff19f1fe

080019fc <HAL_LPTIM_PWM_Start>:
{
 80019fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019fe:	0004      	movs	r4, r0
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001a00:	0026      	movs	r6, r4
 8001a02:	2302      	movs	r3, #2
 8001a04:	362e      	adds	r6, #46	; 0x2e
 8001a06:	7033      	strb	r3, [r6, #0]
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 8001a08:	6823      	ldr	r3, [r4, #0]
{
 8001a0a:	0008      	movs	r0, r1
 8001a0c:	0015      	movs	r5, r2
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 8001a0e:	4911      	ldr	r1, [pc, #68]	; (8001a54 <HAL_LPTIM_PWM_Start+0x58>)
 8001a10:	68da      	ldr	r2, [r3, #12]
  __HAL_LPTIM_ENABLE(hlptim);
 8001a12:	2701      	movs	r7, #1
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 8001a14:	400a      	ands	r2, r1
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001a16:	2110      	movs	r1, #16
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 8001a18:	60da      	str	r2, [r3, #12]
  __HAL_LPTIM_ENABLE(hlptim);
 8001a1a:	691a      	ldr	r2, [r3, #16]
 8001a1c:	433a      	orrs	r2, r7
 8001a1e:	611a      	str	r2, [r3, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001a20:	6059      	str	r1, [r3, #4]
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8001a22:	6198      	str	r0, [r3, #24]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001a24:	0020      	movs	r0, r4
 8001a26:	f7ff ff75 	bl	8001914 <LPTIM_WaitForFlag>
 8001a2a:	2803      	cmp	r0, #3
 8001a2c:	d101      	bne.n	8001a32 <HAL_LPTIM_PWM_Start+0x36>
    return HAL_TIMEOUT;
 8001a2e:	2003      	movs	r0, #3
}
 8001a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001a32:	2108      	movs	r1, #8
 8001a34:	6823      	ldr	r3, [r4, #0]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8001a36:	0020      	movs	r0, r4
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001a38:	6059      	str	r1, [r3, #4]
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 8001a3a:	615d      	str	r5, [r3, #20]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8001a3c:	f7ff ff6a 	bl	8001914 <LPTIM_WaitForFlag>
 8001a40:	2803      	cmp	r0, #3
 8001a42:	d0f4      	beq.n	8001a2e <HAL_LPTIM_PWM_Start+0x32>
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001a44:	2304      	movs	r3, #4
 8001a46:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8001a48:	2000      	movs	r0, #0
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001a4a:	6911      	ldr	r1, [r2, #16]
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	6113      	str	r3, [r2, #16]
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001a50:	7037      	strb	r7, [r6, #0]
  return HAL_OK;
 8001a52:	e7ed      	b.n	8001a30 <HAL_LPTIM_PWM_Start+0x34>
 8001a54:	ffefffff 	.word	0xffefffff

08001a58 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8001a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5a:	0004      	movs	r4, r0
 8001a5c:	b085      	sub	sp, #20
  __ASM volatile ("cpsid i" : : : "memory");
 8001a5e:	b672      	cpsid	i
  uint32_t tmpclksource = 0;
 8001a60:	2200      	movs	r2, #0

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8001a62:	6803      	ldr	r3, [r0, #0]
 8001a64:	4e32      	ldr	r6, [pc, #200]	; (8001b30 <LPTIM_Disable+0xd8>)
  uint32_t tmpclksource = 0;
 8001a66:	9201      	str	r2, [sp, #4]
  switch ((uint32_t)hlptim->Instance)
 8001a68:	42b3      	cmp	r3, r6
 8001a6a:	d105      	bne.n	8001a78 <LPTIM_Disable+0x20>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8001a6c:	4a31      	ldr	r2, [pc, #196]	; (8001b34 <LPTIM_Disable+0xdc>)
 8001a6e:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8001a70:	22c0      	movs	r2, #192	; 0xc0
 8001a72:	0312      	lsls	r2, r2, #12
 8001a74:	4015      	ands	r5, r2
 8001a76:	9501      	str	r5, [sp, #4]
    default:
      break;
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	9202      	str	r2, [sp, #8]
  tmpCFGR = hlptim->Instance->CFGR;
 8001a7c:	68da      	ldr	r2, [r3, #12]
  tmpCMP = hlptim->Instance->CMP;
 8001a7e:	6958      	ldr	r0, [r3, #20]
  tmpCFGR = hlptim->Instance->CFGR;
 8001a80:	9203      	str	r2, [sp, #12]
  tmpARR = hlptim->Instance->ARR;
 8001a82:	699f      	ldr	r7, [r3, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8001a84:	42b3      	cmp	r3, r6
 8001a86:	d10b      	bne.n	8001aa0 <LPTIM_Disable+0x48>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8001a88:	492a      	ldr	r1, [pc, #168]	; (8001b34 <LPTIM_Disable+0xdc>)
 8001a8a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8001a8c:	4694      	mov	ip, r2
 8001a8e:	2280      	movs	r2, #128	; 0x80
 8001a90:	4665      	mov	r5, ip
 8001a92:	0612      	lsls	r2, r2, #24
 8001a94:	432a      	orrs	r2, r5
 8001a96:	628a      	str	r2, [r1, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8001a98:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8001a9a:	0052      	lsls	r2, r2, #1
 8001a9c:	0852      	lsrs	r2, r2, #1
 8001a9e:	628a      	str	r2, [r1, #40]	; 0x28
    default:
      break;
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	433a      	orrs	r2, r7
 8001aa4:	d037      	beq.n	8001b16 <LPTIM_Disable+0xbe>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8001aa6:	42b3      	cmp	r3, r6
 8001aa8:	d104      	bne.n	8001ab4 <LPTIM_Disable+0x5c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8001aaa:	4922      	ldr	r1, [pc, #136]	; (8001b34 <LPTIM_Disable+0xdc>)
 8001aac:	4d22      	ldr	r5, [pc, #136]	; (8001b38 <LPTIM_Disable+0xe0>)
 8001aae:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001ab0:	402a      	ands	r2, r5
 8001ab2:	64ca      	str	r2, [r1, #76]	; 0x4c
        break;
      default:
        break;
    }

    if (tmpCMP != 0UL)
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	d010      	beq.n	8001ada <LPTIM_Disable+0x82>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001ab8:	2201      	movs	r2, #1
 8001aba:	6919      	ldr	r1, [r3, #16]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8001ac0:	2108      	movs	r1, #8
      hlptim->Instance->CMP = tmpCMP;
 8001ac2:	6158      	str	r0, [r3, #20]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8001ac4:	0020      	movs	r0, r4
 8001ac6:	f7ff ff25 	bl	8001914 <LPTIM_WaitForFlag>
 8001aca:	2803      	cmp	r0, #3
 8001acc:	d102      	bne.n	8001ad4 <LPTIM_Disable+0x7c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001ace:	0023      	movs	r3, r4
 8001ad0:	332e      	adds	r3, #46	; 0x2e
 8001ad2:	7018      	strb	r0, [r3, #0]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001ad4:	2208      	movs	r2, #8
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8001ada:	2f00      	cmp	r7, #0
 8001adc:	d011      	beq.n	8001b02 <LPTIM_Disable+0xaa>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001ade:	2201      	movs	r2, #1
 8001ae0:	6823      	ldr	r3, [r4, #0]
      hlptim->Instance->ARR = tmpARR;

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001ae2:	0020      	movs	r0, r4
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001ae4:	6919      	ldr	r1, [r3, #16]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	611a      	str	r2, [r3, #16]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001aea:	2110      	movs	r1, #16
      hlptim->Instance->ARR = tmpARR;
 8001aec:	619f      	str	r7, [r3, #24]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001aee:	f7ff ff11 	bl	8001914 <LPTIM_WaitForFlag>
 8001af2:	2803      	cmp	r0, #3
 8001af4:	d102      	bne.n	8001afc <LPTIM_Disable+0xa4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001af6:	0023      	movs	r3, r4
 8001af8:	332e      	adds	r3, #46	; 0x2e
 8001afa:	7018      	strb	r0, [r3, #0]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001afc:	2210      	movs	r2, #16
 8001afe:	6823      	ldr	r3, [r4, #0]
 8001b00:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	42b3      	cmp	r3, r6
 8001b06:	d106      	bne.n	8001b16 <LPTIM_Disable+0xbe>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8001b08:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <LPTIM_Disable+0xdc>)
 8001b0a:	490b      	ldr	r1, [pc, #44]	; (8001b38 <LPTIM_Disable+0xe0>)
 8001b0c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001b0e:	9d01      	ldr	r5, [sp, #4]
 8001b10:	400b      	ands	r3, r1
 8001b12:	431d      	orrs	r5, r3
 8001b14:	64d5      	str	r5, [r2, #76]	; 0x4c
        break;
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8001b16:	2101      	movs	r1, #1
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	438a      	bics	r2, r1
 8001b1e:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8001b20:	9a02      	ldr	r2, [sp, #8]
 8001b22:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8001b24:	9a03      	ldr	r2, [sp, #12]
 8001b26:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b28:	b662      	cpsie	i

  __enable_irq();
}
 8001b2a:	b005      	add	sp, #20
 8001b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	40007c00 	.word	0x40007c00
 8001b34:	40021000 	.word	0x40021000
 8001b38:	fff3ffff 	.word	0xfff3ffff

08001b3c <HAL_LPTIM_PWM_Stop>:
{
 8001b3c:	b510      	push	{r4, lr}
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001b3e:	0004      	movs	r4, r0
 8001b40:	2302      	movs	r3, #2
 8001b42:	342e      	adds	r4, #46	; 0x2e
 8001b44:	7023      	strb	r3, [r4, #0]
  __HAL_LPTIM_DISABLE(hlptim);
 8001b46:	f7ff ff87 	bl	8001a58 <LPTIM_Disable>
  return hlptim->State;
 8001b4a:	7823      	ldrb	r3, [r4, #0]
 8001b4c:	b2d8      	uxtb	r0, r3
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d002      	beq.n	8001b58 <HAL_LPTIM_PWM_Stop+0x1c>
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001b52:	2301      	movs	r3, #1
  return HAL_OK;
 8001b54:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001b56:	7023      	strb	r3, [r4, #0]
}
 8001b58:	bd10      	pop	{r4, pc}
	...

08001b5c <HAL_PWR_EnterSTOPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_PWR_EnterSTOPMode+0x68>)
{
 8001b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8001b60:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <HAL_PWR_EnterSTOPMode+0x6c>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8001b62:	681e      	ldr	r6, [r3, #0]
{
 8001b64:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8001b66:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8001b68:	6a17      	ldr	r7, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8001b6a:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8001b6c:	2201      	movs	r2, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8001b6e:	0080      	lsls	r0, r0, #2
 8001b70:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8001b72:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8001b74:	4206      	tst	r6, r0
 8001b76:	d005      	beq.n	8001b84 <HAL_PWR_EnterSTOPMode+0x28>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_PWR_EnterSTOPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	4e13      	ldr	r6, [pc, #76]	; (8001bcc <HAL_PWR_EnterSTOPMode+0x70>)
 8001b80:	4030      	ands	r0, r6
 8001b82:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001b84:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8001b86:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001b88:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001b8a:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001b8c:	2504      	movs	r5, #4
  PWR->CR = tmpreg;
 8001b8e:	6018      	str	r0, [r3, #0]
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001b90:	480f      	ldr	r0, [pc, #60]	; (8001bd0 <HAL_PWR_EnterSTOPMode+0x74>)
 8001b92:	6906      	ldr	r6, [r0, #16]
 8001b94:	4335      	orrs	r5, r6
 8001b96:	6105      	str	r5, [r0, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001b98:	2901      	cmp	r1, #1
 8001b9a:	d10e      	bne.n	8001bba <HAL_PWR_EnterSTOPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001b9c:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001b9e:	2504      	movs	r5, #4
 8001ba0:	6901      	ldr	r1, [r0, #16]
 8001ba2:	43a9      	bics	r1, r5
 8001ba4:	6101      	str	r1, [r0, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8001ba6:	2c00      	cmp	r4, #0
 8001ba8:	d006      	beq.n	8001bb8 <HAL_PWR_EnterSTOPMode+0x5c>
 8001baa:	2a00      	cmp	r2, #0
 8001bac:	d004      	beq.n	8001bb8 <HAL_PWR_EnterSTOPMode+0x5c>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	6819      	ldr	r1, [r3, #0]
 8001bb2:	0092      	lsls	r2, r2, #2
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]
  }
}
 8001bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8001bba:	bf40      	sev
    __WFE();
 8001bbc:	bf20      	wfe
    __WFE();
 8001bbe:	bf20      	wfe
 8001bc0:	e7ed      	b.n	8001b9e <HAL_PWR_EnterSTOPMode+0x42>
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	40007000 	.word	0x40007000
 8001bc8:	40010000 	.word	0x40010000
 8001bcc:	fffffdff 	.word	0xfffffdff
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <LL_ADC_Init>:
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001bd4:	6882      	ldr	r2, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	b530      	push	{r4, r5, lr}
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001bda:	2001      	movs	r0, #1
 8001bdc:	0014      	movs	r4, r2
 8001bde:	4004      	ands	r4, r0
 8001be0:	4202      	tst	r2, r0
 8001be2:	d110      	bne.n	8001c06 <LL_ADC_Init+0x32>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8001be4:	688d      	ldr	r5, [r1, #8]
 8001be6:	684a      	ldr	r2, [r1, #4]
 8001be8:	68d8      	ldr	r0, [r3, #12]
 8001bea:	432a      	orrs	r2, r5
 8001bec:	68cd      	ldr	r5, [r1, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 8001bee:	6809      	ldr	r1, [r1, #0]
    MODIFY_REG(ADCx->CFGR1,
 8001bf0:	432a      	orrs	r2, r5
 8001bf2:	4d05      	ldr	r5, [pc, #20]	; (8001c08 <LL_ADC_Init+0x34>)
 8001bf4:	4028      	ands	r0, r5
 8001bf6:	4302      	orrs	r2, r0
  ErrorStatus status = SUCCESS;
 8001bf8:	0020      	movs	r0, r4
    MODIFY_REG(ADCx->CFGR1,
 8001bfa:	60da      	str	r2, [r3, #12]
    MODIFY_REG(ADCx->CFGR2,
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	0892      	lsrs	r2, r2, #2
 8001c02:	430a      	orrs	r2, r1
 8001c04:	611a      	str	r2, [r3, #16]
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8001c06:	bd30      	pop	{r4, r5, pc}
 8001c08:	ffff3fc7 	.word	0xffff3fc7

08001c0c <LL_ADC_REG_Init>:
 8001c0c:	6883      	ldr	r3, [r0, #8]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001c0e:	0002      	movs	r2, r0
 8001c10:	b530      	push	{r4, r5, lr}
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001c12:	2001      	movs	r0, #1
 8001c14:	001c      	movs	r4, r3
 8001c16:	4004      	ands	r4, r0
 8001c18:	4203      	tst	r3, r0
 8001c1a:	d10e      	bne.n	8001c3a <LL_ADC_REG_Init+0x2e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8001c1c:	684d      	ldr	r5, [r1, #4]
 8001c1e:	680b      	ldr	r3, [r1, #0]
 8001c20:	68d0      	ldr	r0, [r2, #12]
 8001c22:	432b      	orrs	r3, r5
 8001c24:	688d      	ldr	r5, [r1, #8]
 8001c26:	432b      	orrs	r3, r5
 8001c28:	68cd      	ldr	r5, [r1, #12]
 8001c2a:	6909      	ldr	r1, [r1, #16]
 8001c2c:	432b      	orrs	r3, r5
 8001c2e:	430b      	orrs	r3, r1
 8001c30:	4902      	ldr	r1, [pc, #8]	; (8001c3c <LL_ADC_REG_Init+0x30>)
 8001c32:	4001      	ands	r1, r0
  ErrorStatus status = SUCCESS;
 8001c34:	0020      	movs	r0, r4
    MODIFY_REG(ADCx->CFGR1,
 8001c36:	430b      	orrs	r3, r1
 8001c38:	60d3      	str	r3, [r2, #12]
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8001c3a:	bd30      	pop	{r4, r5, pc}
 8001c3c:	fffec23c 	.word	0xfffec23c

08001c40 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t pinpos     = 0x00000000U;
 8001c42:	2300      	movs	r3, #0
{
 8001c44:	0002      	movs	r2, r0
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001c46:	680c      	ldr	r4, [r1, #0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 8001c48:	9300      	str	r3, [sp, #0]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001c4a:	0020      	movs	r0, r4
 8001c4c:	9b00      	ldr	r3, [sp, #0]
 8001c4e:	40d8      	lsrs	r0, r3
 8001c50:	d100      	bne.n	8001c54 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
}
 8001c52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001c54:	2001      	movs	r0, #1
 8001c56:	9b00      	ldr	r3, [sp, #0]
 8001c58:	4098      	lsls	r0, r3
 8001c5a:	0023      	movs	r3, r4
 8001c5c:	4003      	ands	r3, r0
    if (currentpin)
 8001c5e:	4204      	tst	r4, r0
 8001c60:	d031      	beq.n	8001cc6 <LL_GPIO_Init+0x86>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001c62:	6848      	ldr	r0, [r1, #4]
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8001c64:	2503      	movs	r5, #3
 8001c66:	9001      	str	r0, [sp, #4]
 8001c68:	0018      	movs	r0, r3
 8001c6a:	4358      	muls	r0, r3
 8001c6c:	4345      	muls	r5, r0
 8001c6e:	9e01      	ldr	r6, [sp, #4]
 8001c70:	43ed      	mvns	r5, r5
 8001c72:	1e77      	subs	r7, r6, #1
 8001c74:	2f01      	cmp	r7, #1
 8001c76:	d80b      	bhi.n	8001c90 <LL_GPIO_Init+0x50>
 8001c78:	688f      	ldr	r7, [r1, #8]
 8001c7a:	6896      	ldr	r6, [r2, #8]
 8001c7c:	4347      	muls	r7, r0
 8001c7e:	402e      	ands	r6, r5
 8001c80:	4337      	orrs	r7, r6
 8001c82:	6097      	str	r7, [r2, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001c84:	6857      	ldr	r7, [r2, #4]
 8001c86:	68ce      	ldr	r6, [r1, #12]
 8001c88:	43a7      	bics	r7, r4
 8001c8a:	4374      	muls	r4, r6
 8001c8c:	433c      	orrs	r4, r7
 8001c8e:	6054      	str	r4, [r2, #4]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001c90:	690c      	ldr	r4, [r1, #16]
 8001c92:	68d7      	ldr	r7, [r2, #12]
 8001c94:	4344      	muls	r4, r0
 8001c96:	402f      	ands	r7, r5
 8001c98:	433c      	orrs	r4, r7
 8001c9a:	60d4      	str	r4, [r2, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001c9c:	9c01      	ldr	r4, [sp, #4]
 8001c9e:	2c02      	cmp	r4, #2
 8001ca0:	d10b      	bne.n	8001cba <LL_GPIO_Init+0x7a>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001ca2:	694f      	ldr	r7, [r1, #20]
        if (currentpin < LL_GPIO_PIN_8)
 8001ca4:	2bff      	cmp	r3, #255	; 0xff
 8001ca6:	d811      	bhi.n	8001ccc <LL_GPIO_Init+0x8c>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001ca8:	0004      	movs	r4, r0
 8001caa:	260f      	movs	r6, #15
 8001cac:	4344      	muls	r4, r0
 8001cae:	4366      	muls	r6, r4
 8001cb0:	437c      	muls	r4, r7
 8001cb2:	6a13      	ldr	r3, [r2, #32]
 8001cb4:	43b3      	bics	r3, r6
 8001cb6:	4323      	orrs	r3, r4
 8001cb8:	6213      	str	r3, [r2, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001cba:	9c01      	ldr	r4, [sp, #4]
 8001cbc:	6813      	ldr	r3, [r2, #0]
 8001cbe:	4360      	muls	r0, r4
 8001cc0:	402b      	ands	r3, r5
 8001cc2:	4303      	orrs	r3, r0
 8001cc4:	6013      	str	r3, [r2, #0]
    pinpos++;
 8001cc6:	9b00      	ldr	r3, [sp, #0]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	e7bc      	b.n	8001c46 <LL_GPIO_Init+0x6>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001ccc:	260f      	movs	r6, #15
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	435b      	muls	r3, r3
 8001cd2:	435b      	muls	r3, r3
 8001cd4:	435e      	muls	r6, r3
 8001cd6:	437b      	muls	r3, r7
 8001cd8:	6a54      	ldr	r4, [r2, #36]	; 0x24
 8001cda:	43b4      	bics	r4, r6
 8001cdc:	431c      	orrs	r4, r3
 8001cde:	6254      	str	r4, [r2, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8001ce0:	e7eb      	b.n	8001cba <LL_GPIO_Init+0x7a>
	...

08001ce4 <LL_LPUART_Init>:
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001ce4:	6802      	ldr	r2, [r0, #0]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8001ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce8:	2301      	movs	r3, #1
 8001cea:	0015      	movs	r5, r2
 8001cec:	0004      	movs	r4, r0
 8001cee:	000e      	movs	r6, r1
 8001cf0:	401d      	ands	r5, r3
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 8001cf2:	421a      	tst	r2, r3
 8001cf4:	d001      	beq.n	8001cfa <LL_LPUART_Init+0x16>
  ErrorStatus status = ERROR;
 8001cf6:	2001      	movs	r0, #1
    }

  }

  return (status);
}
 8001cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(LPUARTx->CR1,
 8001cfa:	684b      	ldr	r3, [r1, #4]
 8001cfc:	68c9      	ldr	r1, [r1, #12]
 8001cfe:	6802      	ldr	r2, [r0, #0]
 8001d00:	430b      	orrs	r3, r1
 8001d02:	6931      	ldr	r1, [r6, #16]
 8001d04:	430b      	orrs	r3, r1
 8001d06:	4913      	ldr	r1, [pc, #76]	; (8001d54 <LL_LPUART_Init+0x70>)
 8001d08:	400a      	ands	r2, r1
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	6003      	str	r3, [r0, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8001d0e:	6843      	ldr	r3, [r0, #4]
 8001d10:	4a11      	ldr	r2, [pc, #68]	; (8001d58 <LL_LPUART_Init+0x74>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	68b2      	ldr	r2, [r6, #8]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	6043      	str	r3, [r0, #4]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001d1a:	6883      	ldr	r3, [r0, #8]
 8001d1c:	4a0f      	ldr	r2, [pc, #60]	; (8001d5c <LL_LPUART_Init+0x78>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	6972      	ldr	r2, [r6, #20]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	6083      	str	r3, [r0, #8]
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8001d26:	20c0      	movs	r0, #192	; 0xc0
 8001d28:	0100      	lsls	r0, r0, #4
 8001d2a:	f000 f889 	bl	8001e40 <LL_RCC_GetLPUARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	d0e1      	beq.n	8001cf6 <LL_LPUART_Init+0x12>
        && (LPUART_InitStruct->BaudRate != 0U))
 8001d32:	6832      	ldr	r2, [r6, #0]
 8001d34:	2a00      	cmp	r2, #0
 8001d36:	d0de      	beq.n	8001cf6 <LL_LPUART_Init+0x12>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, BaudRate);
 8001d38:	0029      	movs	r1, r5
 8001d3a:	0e07      	lsrs	r7, r0, #24
 8001d3c:	0206      	lsls	r6, r0, #8
 8001d3e:	0850      	lsrs	r0, r2, #1
 8001d40:	1980      	adds	r0, r0, r6
 8001d42:	4179      	adcs	r1, r7
 8001d44:	002b      	movs	r3, r5
 8001d46:	f7fe fb67 	bl	8000418 <__aeabi_uldivmod>
 8001d4a:	0300      	lsls	r0, r0, #12
 8001d4c:	0b00      	lsrs	r0, r0, #12
 8001d4e:	60e0      	str	r0, [r4, #12]
      status = SUCCESS;
 8001d50:	0028      	movs	r0, r5
}
 8001d52:	e7d1      	b.n	8001cf8 <LL_LPUART_Init+0x14>
 8001d54:	efffe9f3 	.word	0xefffe9f3
 8001d58:	ffffcfff 	.word	0xffffcfff
 8001d5c:	fffffcff 	.word	0xfffffcff

08001d60 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001d60:	4b02      	ldr	r3, [pc, #8]	; (8001d6c <LL_RCC_HSI_IsReady+0xc>)
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	0740      	lsls	r0, r0, #29
 8001d66:	0fc0      	lsrs	r0, r0, #31
}
 8001d68:	4770      	bx	lr
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	40021000 	.word	0x40021000

08001d70 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8001d70:	4b02      	ldr	r3, [pc, #8]	; (8001d7c <LL_RCC_IsActiveFlag_HSIDIV+0xc>)
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	06c0      	lsls	r0, r0, #27
 8001d76:	0fc0      	lsrs	r0, r0, #31
}
 8001d78:	4770      	bx	lr
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	40021000 	.word	0x40021000

08001d80 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001d82:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <RCC_GetHCLKClockFreq+0x14>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	061b      	lsls	r3, r3, #24
 8001d88:	0f1b      	lsrs	r3, r3, #28
 8001d8a:	5cd3      	ldrb	r3, [r2, r3]
 8001d8c:	40d8      	lsrs	r0, r3
}
 8001d8e:	4770      	bx	lr
 8001d90:	40021000 	.word	0x40021000
 8001d94:	08001f9f 	.word	0x08001f9f

08001d98 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001d9a:	4a04      	ldr	r2, [pc, #16]	; (8001dac <RCC_GetPCLK1ClockFreq+0x14>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	055b      	lsls	r3, r3, #21
 8001da0:	0f5b      	lsrs	r3, r3, #29
 8001da2:	5cd3      	ldrb	r3, [r2, r3]
 8001da4:	40d8      	lsrs	r0, r3
}
 8001da6:	4770      	bx	lr
 8001da8:	40021000 	.word	0x40021000
 8001dac:	08001faf 	.word	0x08001faf

08001db0 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001db0:	220c      	movs	r2, #12
{
 8001db2:	b510      	push	{r4, lr}
 8001db4:	4c1d      	ldr	r4, [pc, #116]	; (8001e2c <RCC_GetSystemClockFreq+0x7c>)
 8001db6:	68e3      	ldr	r3, [r4, #12]
 8001db8:	4013      	ands	r3, r2
  switch (LL_RCC_GetSysClkSource())
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d033      	beq.n	8001e26 <RCC_GetSystemClockFreq+0x76>
 8001dbe:	d80b      	bhi.n	8001dd8 <RCC_GetSystemClockFreq+0x28>
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <RCC_GetSystemClockFreq+0x18>
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d022      	beq.n	8001e0e <RCC_GetSystemClockFreq+0x5e>
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001dc8:	2080      	movs	r0, #128	; 0x80
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8001dca:	6863      	ldr	r3, [r4, #4]
 8001dcc:	0200      	lsls	r0, r0, #8
 8001dce:	041b      	lsls	r3, r3, #16
 8001dd0:	0f5b      	lsrs	r3, r3, #29
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	4098      	lsls	r0, r3
      break;
 8001dd6:	e023      	b.n	8001e20 <RCC_GetSystemClockFreq+0x70>
  switch (LL_RCC_GetSysClkSource())
 8001dd8:	2b0c      	cmp	r3, #12
 8001dda:	d1f5      	bne.n	8001dc8 <RCC_GetSystemClockFreq+0x18>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001ddc:	68e3      	ldr	r3, [r4, #12]
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8001dde:	03db      	lsls	r3, r3, #15
 8001de0:	d41f      	bmi.n	8001e22 <RCC_GetSystemClockFreq+0x72>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001de2:	f7ff ffc5 	bl	8001d70 <LL_RCC_IsActiveFlag_HSIDIV>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
      }
      else
      {
        pllinputfreq = HSI_VALUE;
 8001de6:	1e43      	subs	r3, r0, #1
 8001de8:	4198      	sbcs	r0, r3
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <RCC_GetSystemClockFreq+0x80>)
 8001dec:	4240      	negs	r0, r0
 8001dee:	4018      	ands	r0, r3
 8001df0:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <RCC_GetSystemClockFreq+0x84>)
 8001df2:	18c0      	adds	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001df4:	68e3      	ldr	r3, [r4, #12]

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8001df6:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <RCC_GetSystemClockFreq+0x88>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8001df8:	68e1      	ldr	r1, [r4, #12]
 8001dfa:	029b      	lsls	r3, r3, #10
 8001dfc:	0f1b      	lsrs	r3, r3, #28
 8001dfe:	5cd3      	ldrb	r3, [r2, r3]
 8001e00:	0209      	lsls	r1, r1, #8
 8001e02:	0f89      	lsrs	r1, r1, #30
 8001e04:	4358      	muls	r0, r3
 8001e06:	3101      	adds	r1, #1
 8001e08:	f7fe f990 	bl	800012c <__udivsi3>
      break;
 8001e0c:	e008      	b.n	8001e20 <RCC_GetSystemClockFreq+0x70>
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001e0e:	f7ff ffaf 	bl	8001d70 <LL_RCC_IsActiveFlag_HSIDIV>
        frequency = HSI_VALUE;
 8001e12:	1e43      	subs	r3, r0, #1
 8001e14:	4198      	sbcs	r0, r3
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <RCC_GetSystemClockFreq+0x80>)
 8001e18:	4240      	negs	r0, r0
 8001e1a:	4018      	ands	r0, r3
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <RCC_GetSystemClockFreq+0x84>)
 8001e1e:	18c0      	adds	r0, r0, r3
}
 8001e20:	bd10      	pop	{r4, pc}
      pllinputfreq = HSE_VALUE;
 8001e22:	4806      	ldr	r0, [pc, #24]	; (8001e3c <RCC_GetSystemClockFreq+0x8c>)
 8001e24:	e7e6      	b.n	8001df4 <RCC_GetSystemClockFreq+0x44>
  switch (LL_RCC_GetSysClkSource())
 8001e26:	4805      	ldr	r0, [pc, #20]	; (8001e3c <RCC_GetSystemClockFreq+0x8c>)
 8001e28:	e7fa      	b.n	8001e20 <RCC_GetSystemClockFreq+0x70>
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	ff48e500 	.word	0xff48e500
 8001e34:	00f42400 	.word	0x00f42400
 8001e38:	08001fb7 	.word	0x08001fb7
 8001e3c:	007a1200 	.word	0x007a1200

08001e40 <LL_RCC_GetLPUARTClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8001e40:	4a17      	ldr	r2, [pc, #92]	; (8001ea0 <LL_RCC_GetLPUARTClockFreq+0x60>)
{
 8001e42:	b510      	push	{r4, lr}
 8001e44:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001e46:	4018      	ands	r0, r3
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	4298      	cmp	r0, r3
 8001e4e:	d00a      	beq.n	8001e66 <LL_RCC_GetLPUARTClockFreq+0x26>
 8001e50:	23c0      	movs	r3, #192	; 0xc0
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	4298      	cmp	r0, r3
 8001e56:	d014      	beq.n	8001e82 <LL_RCC_GetLPUARTClockFreq+0x42>
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d115      	bne.n	8001e8c <LL_RCC_GetLPUARTClockFreq+0x4c>
      lpuart_frequency = RCC_GetSystemClockFreq();
 8001e60:	f7ff ffa6 	bl	8001db0 <RCC_GetSystemClockFreq>
}
 8001e64:	bd10      	pop	{r4, pc}
      if (LL_RCC_HSI_IsReady() != 0U)
 8001e66:	f7ff ff7b 	bl	8001d60 <LL_RCC_HSI_IsReady>
 8001e6a:	2800      	cmp	r0, #0
 8001e6c:	d00c      	beq.n	8001e88 <LL_RCC_GetLPUARTClockFreq+0x48>
        if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001e6e:	f7ff ff7f 	bl	8001d70 <LL_RCC_IsActiveFlag_HSIDIV>
          lpuart_frequency = HSI_VALUE;
 8001e72:	1e43      	subs	r3, r0, #1
 8001e74:	4198      	sbcs	r0, r3
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <LL_RCC_GetLPUARTClockFreq+0x64>)
 8001e78:	4240      	negs	r0, r0
 8001e7a:	4018      	ands	r0, r3
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <LL_RCC_GetLPUARTClockFreq+0x68>)
 8001e7e:	18c0      	adds	r0, r0, r3
 8001e80:	e7f0      	b.n	8001e64 <LL_RCC_GetLPUARTClockFreq+0x24>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8001e82:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001e84:	059b      	lsls	r3, r3, #22
 8001e86:	d408      	bmi.n	8001e9a <LL_RCC_GetLPUARTClockFreq+0x5a>
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001e88:	2000      	movs	r0, #0
 8001e8a:	e7eb      	b.n	8001e64 <LL_RCC_GetLPUARTClockFreq+0x24>
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001e8c:	f7ff ff90 	bl	8001db0 <RCC_GetSystemClockFreq>
 8001e90:	f7ff ff76 	bl	8001d80 <RCC_GetHCLKClockFreq>
 8001e94:	f7ff ff80 	bl	8001d98 <RCC_GetPCLK1ClockFreq>
      break;
 8001e98:	e7e4      	b.n	8001e64 <LL_RCC_GetLPUARTClockFreq+0x24>
        lpuart_frequency = LSE_VALUE;
 8001e9a:	2080      	movs	r0, #128	; 0x80
 8001e9c:	0200      	lsls	r0, r0, #8
  return lpuart_frequency;
 8001e9e:	e7e1      	b.n	8001e64 <LL_RCC_GetLPUARTClockFreq+0x24>
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	ff48e500 	.word	0xff48e500
 8001ea8:	00f42400 	.word	0x00f42400

08001eac <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001eac:	4b01      	ldr	r3, [pc, #4]	; (8001eb4 <LL_SetSystemCoreClock+0x8>)
 8001eae:	6018      	str	r0, [r3, #0]
}
 8001eb0:	4770      	bx	lr
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	20000008 	.word	0x20000008

08001eb8 <__libc_init_array>:
 8001eb8:	b570      	push	{r4, r5, r6, lr}
 8001eba:	2600      	movs	r6, #0
 8001ebc:	4d0c      	ldr	r5, [pc, #48]	; (8001ef0 <__libc_init_array+0x38>)
 8001ebe:	4c0d      	ldr	r4, [pc, #52]	; (8001ef4 <__libc_init_array+0x3c>)
 8001ec0:	1b64      	subs	r4, r4, r5
 8001ec2:	10a4      	asrs	r4, r4, #2
 8001ec4:	42a6      	cmp	r6, r4
 8001ec6:	d109      	bne.n	8001edc <__libc_init_array+0x24>
 8001ec8:	2600      	movs	r6, #0
 8001eca:	f000 f82b 	bl	8001f24 <_init>
 8001ece:	4d0a      	ldr	r5, [pc, #40]	; (8001ef8 <__libc_init_array+0x40>)
 8001ed0:	4c0a      	ldr	r4, [pc, #40]	; (8001efc <__libc_init_array+0x44>)
 8001ed2:	1b64      	subs	r4, r4, r5
 8001ed4:	10a4      	asrs	r4, r4, #2
 8001ed6:	42a6      	cmp	r6, r4
 8001ed8:	d105      	bne.n	8001ee6 <__libc_init_array+0x2e>
 8001eda:	bd70      	pop	{r4, r5, r6, pc}
 8001edc:	00b3      	lsls	r3, r6, #2
 8001ede:	58eb      	ldr	r3, [r5, r3]
 8001ee0:	4798      	blx	r3
 8001ee2:	3601      	adds	r6, #1
 8001ee4:	e7ee      	b.n	8001ec4 <__libc_init_array+0xc>
 8001ee6:	00b3      	lsls	r3, r6, #2
 8001ee8:	58eb      	ldr	r3, [r5, r3]
 8001eea:	4798      	blx	r3
 8001eec:	3601      	adds	r6, #1
 8001eee:	e7f2      	b.n	8001ed6 <__libc_init_array+0x1e>
 8001ef0:	08001fc8 	.word	0x08001fc8
 8001ef4:	08001fc8 	.word	0x08001fc8
 8001ef8:	08001fc8 	.word	0x08001fc8
 8001efc:	08001fcc 	.word	0x08001fcc

08001f00 <memcpy>:
 8001f00:	2300      	movs	r3, #0
 8001f02:	b510      	push	{r4, lr}
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d100      	bne.n	8001f0a <memcpy+0xa>
 8001f08:	bd10      	pop	{r4, pc}
 8001f0a:	5ccc      	ldrb	r4, [r1, r3]
 8001f0c:	54c4      	strb	r4, [r0, r3]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	e7f8      	b.n	8001f04 <memcpy+0x4>

08001f12 <memset>:
 8001f12:	0003      	movs	r3, r0
 8001f14:	1882      	adds	r2, r0, r2
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d100      	bne.n	8001f1c <memset+0xa>
 8001f1a:	4770      	bx	lr
 8001f1c:	7019      	strb	r1, [r3, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	e7f9      	b.n	8001f16 <memset+0x4>
	...

08001f24 <_init>:
 8001f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f2a:	bc08      	pop	{r3}
 8001f2c:	469e      	mov	lr, r3
 8001f2e:	4770      	bx	lr

08001f30 <_fini>:
 8001f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f36:	bc08      	pop	{r3}
 8001f38:	469e      	mov	lr, r3
 8001f3a:	4770      	bx	lr
